// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: level.proto

#ifndef PROTOBUF_INCLUDED_level_2eproto
#define PROTOBUF_INCLUDED_level_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "syncMessage.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_level_2eproto 

namespace protobuf_level_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_level_2eproto
namespace TCCamp {
class GhostData;
class GhostDataDefaultTypeInternal;
extern GhostDataDefaultTypeInternal _GhostData_default_instance_;
class GhostState;
class GhostStateDefaultTypeInternal;
extern GhostStateDefaultTypeInternal _GhostState_default_instance_;
class GhostTimer;
class GhostTimerDefaultTypeInternal;
extern GhostTimerDefaultTypeInternal _GhostTimer_default_instance_;
class IntPair;
class IntPairDefaultTypeInternal;
extern IntPairDefaultTypeInternal _IntPair_default_instance_;
class LevelDataReq;
class LevelDataReqDefaultTypeInternal;
extern LevelDataReqDefaultTypeInternal _LevelDataReq_default_instance_;
class LevelDataRsp;
class LevelDataRspDefaultTypeInternal;
extern LevelDataRspDefaultTypeInternal _LevelDataRsp_default_instance_;
class LevelDetailReq;
class LevelDetailReqDefaultTypeInternal;
extern LevelDetailReqDefaultTypeInternal _LevelDetailReq_default_instance_;
class LevelDetailRsp;
class LevelDetailRspDefaultTypeInternal;
extern LevelDetailRspDefaultTypeInternal _LevelDetailRsp_default_instance_;
class LevelListItem;
class LevelListItemDefaultTypeInternal;
extern LevelListItemDefaultTypeInternal _LevelListItem_default_instance_;
class LevelListReq;
class LevelListReqDefaultTypeInternal;
extern LevelListReqDefaultTypeInternal _LevelListReq_default_instance_;
class LevelListRsp;
class LevelListRspDefaultTypeInternal;
extern LevelListRspDefaultTypeInternal _LevelListRsp_default_instance_;
class LevelSettleReq;
class LevelSettleReqDefaultTypeInternal;
extern LevelSettleReqDefaultTypeInternal _LevelSettleReq_default_instance_;
class LevelSettleRsp;
class LevelSettleRspDefaultTypeInternal;
extern LevelSettleRspDefaultTypeInternal _LevelSettleRsp_default_instance_;
class LevelStart;
class LevelStartDefaultTypeInternal;
extern LevelStartDefaultTypeInternal _LevelStart_default_instance_;
class LevelState;
class LevelStateDefaultTypeInternal;
extern LevelStateDefaultTypeInternal _LevelState_default_instance_;
class LightData;
class LightDataDefaultTypeInternal;
extern LightDataDefaultTypeInternal _LightData_default_instance_;
class LightState;
class LightStateDefaultTypeInternal;
extern LightStateDefaultTypeInternal _LightState_default_instance_;
class PosRot;
class PosRotDefaultTypeInternal;
extern PosRotDefaultTypeInternal _PosRot_default_instance_;
class RankItem;
class RankItemDefaultTypeInternal;
extern RankItemDefaultTypeInternal _RankItem_default_instance_;
class RankReq;
class RankReqDefaultTypeInternal;
extern RankReqDefaultTypeInternal _RankReq_default_instance_;
class RankRsp;
class RankRspDefaultTypeInternal;
extern RankRspDefaultTypeInternal _RankRsp_default_instance_;
class ReconnectPkg;
class ReconnectPkgDefaultTypeInternal;
extern ReconnectPkgDefaultTypeInternal _ReconnectPkg_default_instance_;
class ServerSaveFile;
class ServerSaveFileDefaultTypeInternal;
extern ServerSaveFileDefaultTypeInternal _ServerSaveFile_default_instance_;
class SkillState;
class SkillStateDefaultTypeInternal;
extern SkillStateDefaultTypeInternal _SkillState_default_instance_;
class SlowState;
class SlowStateDefaultTypeInternal;
extern SlowStateDefaultTypeInternal _SlowState_default_instance_;
class TimerID2floatTimes;
class TimerID2floatTimesDefaultTypeInternal;
extern TimerID2floatTimesDefaultTypeInternal _TimerID2floatTimes_default_instance_;
class TreasureChestData;
class TreasureChestDataDefaultTypeInternal;
extern TreasureChestDataDefaultTypeInternal _TreasureChestData_default_instance_;
class TreasureChestState;
class TreasureChestStateDefaultTypeInternal;
extern TreasureChestStateDefaultTypeInternal _TreasureChestState_default_instance_;
}  // namespace TCCamp
namespace google {
namespace protobuf {
template<> ::TCCamp::GhostData* Arena::CreateMaybeMessage<::TCCamp::GhostData>(Arena*);
template<> ::TCCamp::GhostState* Arena::CreateMaybeMessage<::TCCamp::GhostState>(Arena*);
template<> ::TCCamp::GhostTimer* Arena::CreateMaybeMessage<::TCCamp::GhostTimer>(Arena*);
template<> ::TCCamp::IntPair* Arena::CreateMaybeMessage<::TCCamp::IntPair>(Arena*);
template<> ::TCCamp::LevelDataReq* Arena::CreateMaybeMessage<::TCCamp::LevelDataReq>(Arena*);
template<> ::TCCamp::LevelDataRsp* Arena::CreateMaybeMessage<::TCCamp::LevelDataRsp>(Arena*);
template<> ::TCCamp::LevelDetailReq* Arena::CreateMaybeMessage<::TCCamp::LevelDetailReq>(Arena*);
template<> ::TCCamp::LevelDetailRsp* Arena::CreateMaybeMessage<::TCCamp::LevelDetailRsp>(Arena*);
template<> ::TCCamp::LevelListItem* Arena::CreateMaybeMessage<::TCCamp::LevelListItem>(Arena*);
template<> ::TCCamp::LevelListReq* Arena::CreateMaybeMessage<::TCCamp::LevelListReq>(Arena*);
template<> ::TCCamp::LevelListRsp* Arena::CreateMaybeMessage<::TCCamp::LevelListRsp>(Arena*);
template<> ::TCCamp::LevelSettleReq* Arena::CreateMaybeMessage<::TCCamp::LevelSettleReq>(Arena*);
template<> ::TCCamp::LevelSettleRsp* Arena::CreateMaybeMessage<::TCCamp::LevelSettleRsp>(Arena*);
template<> ::TCCamp::LevelStart* Arena::CreateMaybeMessage<::TCCamp::LevelStart>(Arena*);
template<> ::TCCamp::LevelState* Arena::CreateMaybeMessage<::TCCamp::LevelState>(Arena*);
template<> ::TCCamp::LightData* Arena::CreateMaybeMessage<::TCCamp::LightData>(Arena*);
template<> ::TCCamp::LightState* Arena::CreateMaybeMessage<::TCCamp::LightState>(Arena*);
template<> ::TCCamp::PosRot* Arena::CreateMaybeMessage<::TCCamp::PosRot>(Arena*);
template<> ::TCCamp::RankItem* Arena::CreateMaybeMessage<::TCCamp::RankItem>(Arena*);
template<> ::TCCamp::RankReq* Arena::CreateMaybeMessage<::TCCamp::RankReq>(Arena*);
template<> ::TCCamp::RankRsp* Arena::CreateMaybeMessage<::TCCamp::RankRsp>(Arena*);
template<> ::TCCamp::ReconnectPkg* Arena::CreateMaybeMessage<::TCCamp::ReconnectPkg>(Arena*);
template<> ::TCCamp::ServerSaveFile* Arena::CreateMaybeMessage<::TCCamp::ServerSaveFile>(Arena*);
template<> ::TCCamp::SkillState* Arena::CreateMaybeMessage<::TCCamp::SkillState>(Arena*);
template<> ::TCCamp::SlowState* Arena::CreateMaybeMessage<::TCCamp::SlowState>(Arena*);
template<> ::TCCamp::TimerID2floatTimes* Arena::CreateMaybeMessage<::TCCamp::TimerID2floatTimes>(Arena*);
template<> ::TCCamp::TreasureChestData* Arena::CreateMaybeMessage<::TCCamp::TreasureChestData>(Arena*);
template<> ::TCCamp::TreasureChestState* Arena::CreateMaybeMessage<::TCCamp::TreasureChestState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TCCamp {

enum CLIENT_LEVEL_CMD {
  CLIENT_LEVEL_INVALID = 0,
  CLIENT_LEVEL_LIST_REQ = 10000,
  CLIENT_LEVEL_DETAIL_REQ = 10001,
  CLIENT_LEVEL_DATA_REQ = 10002,
  CLIENT_LEVEL_START = 10003,
  CLIENT_LEVEL_SETTLE_REQ = 10004,
  CLIENT_LEVEL_RANK_REQ = 10005,
  CLIENT_LEVEL_UPDATE_STATE = 10006,
  CLIENT_LEVEL_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CLIENT_LEVEL_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CLIENT_LEVEL_CMD_IsValid(int value);
const CLIENT_LEVEL_CMD CLIENT_LEVEL_CMD_MIN = CLIENT_LEVEL_INVALID;
const CLIENT_LEVEL_CMD CLIENT_LEVEL_CMD_MAX = CLIENT_LEVEL_UPDATE_STATE;
const int CLIENT_LEVEL_CMD_ARRAYSIZE = CLIENT_LEVEL_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_LEVEL_CMD_descriptor();
inline const ::std::string& CLIENT_LEVEL_CMD_Name(CLIENT_LEVEL_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_LEVEL_CMD_descriptor(), value);
}
inline bool CLIENT_LEVEL_CMD_Parse(
    const ::std::string& name, CLIENT_LEVEL_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_LEVEL_CMD>(
    CLIENT_LEVEL_CMD_descriptor(), name, value);
}
enum SERVER_LEVEL_CMD {
  SERVER_LEVEL_INVALID = 0,
  SERVER_LEVEL_LIST_RSP = 20000,
  SERVER_LEVEL_DETAIL_RSP = 20001,
  SERVER_LEVEL_DATA_RSP = 20002,
  SERVER_LEVEL_SETTLE_RSP = 20003,
  SERVER_LEVEL_RANK_RSP = 20004,
  SERVER_LEVEL_RECONNECT = 20005,
  SERVER_LEVEL_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_LEVEL_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_LEVEL_CMD_IsValid(int value);
const SERVER_LEVEL_CMD SERVER_LEVEL_CMD_MIN = SERVER_LEVEL_INVALID;
const SERVER_LEVEL_CMD SERVER_LEVEL_CMD_MAX = SERVER_LEVEL_RECONNECT;
const int SERVER_LEVEL_CMD_ARRAYSIZE = SERVER_LEVEL_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_LEVEL_CMD_descriptor();
inline const ::std::string& SERVER_LEVEL_CMD_Name(SERVER_LEVEL_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_LEVEL_CMD_descriptor(), value);
}
inline bool SERVER_LEVEL_CMD_Parse(
    const ::std::string& name, SERVER_LEVEL_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_LEVEL_CMD>(
    SERVER_LEVEL_CMD_descriptor(), name, value);
}
enum LEVEL_LIST_RESULT_CODE {
  LEVEL_LIST_RESULT_OK = 0,
  LEVEL_LIST_RESULT_PLAYER_NOT_ONLINE = 1,
  LEVEL_LIST_RESULT_SERVER_ERROR = 2,
  LEVEL_LIST_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LEVEL_LIST_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LEVEL_LIST_RESULT_CODE_IsValid(int value);
const LEVEL_LIST_RESULT_CODE LEVEL_LIST_RESULT_CODE_MIN = LEVEL_LIST_RESULT_OK;
const LEVEL_LIST_RESULT_CODE LEVEL_LIST_RESULT_CODE_MAX = LEVEL_LIST_RESULT_SERVER_ERROR;
const int LEVEL_LIST_RESULT_CODE_ARRAYSIZE = LEVEL_LIST_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEVEL_LIST_RESULT_CODE_descriptor();
inline const ::std::string& LEVEL_LIST_RESULT_CODE_Name(LEVEL_LIST_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEVEL_LIST_RESULT_CODE_descriptor(), value);
}
inline bool LEVEL_LIST_RESULT_CODE_Parse(
    const ::std::string& name, LEVEL_LIST_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEVEL_LIST_RESULT_CODE>(
    LEVEL_LIST_RESULT_CODE_descriptor(), name, value);
}
enum LEVEL_DETAIL_RESULT_CODE {
  LEVEL_DETAIL_RESULT_OK = 0,
  LEVEL_DETAIL_RESULT_LEVELID_ILLEGAL = 1,
  LEVEL_DETAIL_RESULT_PLAYER_NOT_ONLINE = 2,
  LEVEL_DETAIL_RESULT_SERVER_ERROR = 3,
  LEVEL_DETAIL_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LEVEL_DETAIL_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LEVEL_DETAIL_RESULT_CODE_IsValid(int value);
const LEVEL_DETAIL_RESULT_CODE LEVEL_DETAIL_RESULT_CODE_MIN = LEVEL_DETAIL_RESULT_OK;
const LEVEL_DETAIL_RESULT_CODE LEVEL_DETAIL_RESULT_CODE_MAX = LEVEL_DETAIL_RESULT_SERVER_ERROR;
const int LEVEL_DETAIL_RESULT_CODE_ARRAYSIZE = LEVEL_DETAIL_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEVEL_DETAIL_RESULT_CODE_descriptor();
inline const ::std::string& LEVEL_DETAIL_RESULT_CODE_Name(LEVEL_DETAIL_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEVEL_DETAIL_RESULT_CODE_descriptor(), value);
}
inline bool LEVEL_DETAIL_RESULT_CODE_Parse(
    const ::std::string& name, LEVEL_DETAIL_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEVEL_DETAIL_RESULT_CODE>(
    LEVEL_DETAIL_RESULT_CODE_descriptor(), name, value);
}
enum LEVEL_DATA_RESULT_CODE {
  LEVEL_DATA_RESULT_OK = 0,
  LEVEL_DATA_RESULT_LEVELID_ILLEGAL = 1,
  LEVEL_DATA_RESULT_PLAYER_NOT_ONLINE = 2,
  LEVEL_DETA_RESULT_SERVER_ERROR = 3,
  LEVEL_DATA_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LEVEL_DATA_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LEVEL_DATA_RESULT_CODE_IsValid(int value);
const LEVEL_DATA_RESULT_CODE LEVEL_DATA_RESULT_CODE_MIN = LEVEL_DATA_RESULT_OK;
const LEVEL_DATA_RESULT_CODE LEVEL_DATA_RESULT_CODE_MAX = LEVEL_DETA_RESULT_SERVER_ERROR;
const int LEVEL_DATA_RESULT_CODE_ARRAYSIZE = LEVEL_DATA_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEVEL_DATA_RESULT_CODE_descriptor();
inline const ::std::string& LEVEL_DATA_RESULT_CODE_Name(LEVEL_DATA_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEVEL_DATA_RESULT_CODE_descriptor(), value);
}
inline bool LEVEL_DATA_RESULT_CODE_Parse(
    const ::std::string& name, LEVEL_DATA_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEVEL_DATA_RESULT_CODE>(
    LEVEL_DATA_RESULT_CODE_descriptor(), name, value);
}
enum LEVEL_SETTLE_RESULT_CODE {
  LEVEL_SETTLE_RESULT_OK = 0,
  LEVEL_SETTLE_RESULT_CHEATING = 1,
  LEVEL_SETTLE_RESULT_CAN_NOT_FIND_GAME = 2,
  LEVEL_SETTLE_RESULT_SERVER_ERROR = 3,
  LEVEL_SETTLE_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LEVEL_SETTLE_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LEVEL_SETTLE_RESULT_CODE_IsValid(int value);
const LEVEL_SETTLE_RESULT_CODE LEVEL_SETTLE_RESULT_CODE_MIN = LEVEL_SETTLE_RESULT_OK;
const LEVEL_SETTLE_RESULT_CODE LEVEL_SETTLE_RESULT_CODE_MAX = LEVEL_SETTLE_RESULT_SERVER_ERROR;
const int LEVEL_SETTLE_RESULT_CODE_ARRAYSIZE = LEVEL_SETTLE_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEVEL_SETTLE_RESULT_CODE_descriptor();
inline const ::std::string& LEVEL_SETTLE_RESULT_CODE_Name(LEVEL_SETTLE_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEVEL_SETTLE_RESULT_CODE_descriptor(), value);
}
inline bool LEVEL_SETTLE_RESULT_CODE_Parse(
    const ::std::string& name, LEVEL_SETTLE_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEVEL_SETTLE_RESULT_CODE>(
    LEVEL_SETTLE_RESULT_CODE_descriptor(), name, value);
}
enum LEVEL_RANK_RESULT_CODE {
  LEVEL_RANK_RESULT_OK = 0,
  LEVEL_RANK_RESULT_PAGE_ILLEGAL = 1,
  LEVEL_RANK_RESULT_PLAYER_NOT_ONLINE = 2,
  LEVEL_RANK_RESULT_SERVER_ERROR = 3,
  LEVEL_RANK_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LEVEL_RANK_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LEVEL_RANK_RESULT_CODE_IsValid(int value);
const LEVEL_RANK_RESULT_CODE LEVEL_RANK_RESULT_CODE_MIN = LEVEL_RANK_RESULT_OK;
const LEVEL_RANK_RESULT_CODE LEVEL_RANK_RESULT_CODE_MAX = LEVEL_RANK_RESULT_SERVER_ERROR;
const int LEVEL_RANK_RESULT_CODE_ARRAYSIZE = LEVEL_RANK_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEVEL_RANK_RESULT_CODE_descriptor();
inline const ::std::string& LEVEL_RANK_RESULT_CODE_Name(LEVEL_RANK_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEVEL_RANK_RESULT_CODE_descriptor(), value);
}
inline bool LEVEL_RANK_RESULT_CODE_Parse(
    const ::std::string& name, LEVEL_RANK_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEVEL_RANK_RESULT_CODE>(
    LEVEL_RANK_RESULT_CODE_descriptor(), name, value);
}
// ===================================================================

class LevelListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelListReq) */ {
 public:
  LevelListReq();
  virtual ~LevelListReq();

  LevelListReq(const LevelListReq& from);

  inline LevelListReq& operator=(const LevelListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelListReq(LevelListReq&& from) noexcept
    : LevelListReq() {
    *this = ::std::move(from);
  }

  inline LevelListReq& operator=(LevelListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelListReq* internal_default_instance() {
    return reinterpret_cast<const LevelListReq*>(
               &_LevelListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LevelListReq* other);
  friend void swap(LevelListReq& a, LevelListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelListReq* New() const final {
    return CreateMaybeMessage<LevelListReq>(NULL);
  }

  LevelListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelListReq& from);
  void MergeFrom(const LevelListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelListItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelListItem) */ {
 public:
  LevelListItem();
  virtual ~LevelListItem();

  LevelListItem(const LevelListItem& from);

  inline LevelListItem& operator=(const LevelListItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelListItem(LevelListItem&& from) noexcept
    : LevelListItem() {
    *this = ::std::move(from);
  }

  inline LevelListItem& operator=(LevelListItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelListItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelListItem* internal_default_instance() {
    return reinterpret_cast<const LevelListItem*>(
               &_LevelListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LevelListItem* other);
  friend void swap(LevelListItem& a, LevelListItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelListItem* New() const final {
    return CreateMaybeMessage<LevelListItem>(NULL);
  }

  LevelListItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelListItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelListItem& from);
  void MergeFrom(const LevelListItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelListItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 LevelID = 1;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelListItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 levelid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelListRsp) */ {
 public:
  LevelListRsp();
  virtual ~LevelListRsp();

  LevelListRsp(const LevelListRsp& from);

  inline LevelListRsp& operator=(const LevelListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelListRsp(LevelListRsp&& from) noexcept
    : LevelListRsp() {
    *this = ::std::move(from);
  }

  inline LevelListRsp& operator=(LevelListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelListRsp* internal_default_instance() {
    return reinterpret_cast<const LevelListRsp*>(
               &_LevelListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LevelListRsp* other);
  friend void swap(LevelListRsp& a, LevelListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelListRsp* New() const final {
    return CreateMaybeMessage<LevelListRsp>(NULL);
  }

  LevelListRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelListRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelListRsp& from);
  void MergeFrom(const LevelListRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.LevelListItem LevelList = 2;
  int levellist_size() const;
  void clear_levellist();
  static const int kLevelListFieldNumber = 2;
  ::TCCamp::LevelListItem* mutable_levellist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::LevelListItem >*
      mutable_levellist();
  const ::TCCamp::LevelListItem& levellist(int index) const;
  ::TCCamp::LevelListItem* add_levellist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::LevelListItem >&
      levellist() const;

  // int32 ResultCode = 1;
  void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::int32 resultcode() const;
  void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::LevelListItem > levellist_;
  ::google::protobuf::int32 resultcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelDetailReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelDetailReq) */ {
 public:
  LevelDetailReq();
  virtual ~LevelDetailReq();

  LevelDetailReq(const LevelDetailReq& from);

  inline LevelDetailReq& operator=(const LevelDetailReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelDetailReq(LevelDetailReq&& from) noexcept
    : LevelDetailReq() {
    *this = ::std::move(from);
  }

  inline LevelDetailReq& operator=(LevelDetailReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelDetailReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelDetailReq* internal_default_instance() {
    return reinterpret_cast<const LevelDetailReq*>(
               &_LevelDetailReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LevelDetailReq* other);
  friend void swap(LevelDetailReq& a, LevelDetailReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelDetailReq* New() const final {
    return CreateMaybeMessage<LevelDetailReq>(NULL);
  }

  LevelDetailReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelDetailReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelDetailReq& from);
  void MergeFrom(const LevelDetailReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelDetailReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 LevelID = 2;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelDetailReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 levelid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelDetailRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelDetailRsp) */ {
 public:
  LevelDetailRsp();
  virtual ~LevelDetailRsp();

  LevelDetailRsp(const LevelDetailRsp& from);

  inline LevelDetailRsp& operator=(const LevelDetailRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelDetailRsp(LevelDetailRsp&& from) noexcept
    : LevelDetailRsp() {
    *this = ::std::move(from);
  }

  inline LevelDetailRsp& operator=(LevelDetailRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelDetailRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelDetailRsp* internal_default_instance() {
    return reinterpret_cast<const LevelDetailRsp*>(
               &_LevelDetailRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LevelDetailRsp* other);
  friend void swap(LevelDetailRsp& a, LevelDetailRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelDetailRsp* New() const final {
    return CreateMaybeMessage<LevelDetailRsp>(NULL);
  }

  LevelDetailRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelDetailRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelDetailRsp& from);
  void MergeFrom(const LevelDetailRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelDetailRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Detail = 4;
  void clear_detail();
  static const int kDetailFieldNumber = 4;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // int32 ResultCode = 1;
  void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::int32 resultcode() const;
  void set_resultcode(::google::protobuf::int32 value);

  // int32 LevelID = 2;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // int32 GhostQuantity = 5;
  void clear_ghostquantity();
  static const int kGhostQuantityFieldNumber = 5;
  ::google::protobuf::int32 ghostquantity() const;
  void set_ghostquantity(::google::protobuf::int32 value);

  // int32 GargoyleQuantity = 6;
  void clear_gargoylequantity();
  static const int kGargoyleQuantityFieldNumber = 6;
  ::google::protobuf::int32 gargoylequantity() const;
  void set_gargoylequantity(::google::protobuf::int32 value);

  // double GhostSpeed = 8;
  void clear_ghostspeed();
  static const int kGhostSpeedFieldNumber = 8;
  double ghostspeed() const;
  void set_ghostspeed(double value);

  // int32 TreasureChestQuantity = 7;
  void clear_treasurechestquantity();
  static const int kTreasureChestQuantityFieldNumber = 7;
  ::google::protobuf::int32 treasurechestquantity() const;
  void set_treasurechestquantity(::google::protobuf::int32 value);

  // int32 PlayerHP = 10;
  void clear_playerhp();
  static const int kPlayerHPFieldNumber = 10;
  ::google::protobuf::int32 playerhp() const;
  void set_playerhp(::google::protobuf::int32 value);

  // double PlayerSpeed = 9;
  void clear_playerspeed();
  static const int kPlayerSpeedFieldNumber = 9;
  double playerspeed() const;
  void set_playerspeed(double value);

  // int32 LimitTime = 11;
  void clear_limittime();
  static const int kLimitTimeFieldNumber = 11;
  ::google::protobuf::int32 limittime() const;
  void set_limittime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelDetailRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::int32 resultcode_;
  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 ghostquantity_;
  ::google::protobuf::int32 gargoylequantity_;
  double ghostspeed_;
  ::google::protobuf::int32 treasurechestquantity_;
  ::google::protobuf::int32 playerhp_;
  double playerspeed_;
  ::google::protobuf::int32 limittime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GhostData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GhostData) */ {
 public:
  GhostData();
  virtual ~GhostData();

  GhostData(const GhostData& from);

  inline GhostData& operator=(const GhostData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GhostData(GhostData&& from) noexcept
    : GhostData() {
    *this = ::std::move(from);
  }

  inline GhostData& operator=(GhostData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GhostData* internal_default_instance() {
    return reinterpret_cast<const GhostData*>(
               &_GhostData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GhostData* other);
  friend void swap(GhostData& a, GhostData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GhostData* New() const final {
    return CreateMaybeMessage<GhostData>(NULL);
  }

  GhostData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GhostData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GhostData& from);
  void MergeFrom(const GhostData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GhostData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 WayPoint = 3;
  int waypoint_size() const;
  void clear_waypoint();
  static const int kWayPointFieldNumber = 3;
  ::google::protobuf::int32 waypoint(int index) const;
  void set_waypoint(int index, ::google::protobuf::int32 value);
  void add_waypoint(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      waypoint() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_waypoint();

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 BirthPoint = 2;
  void clear_birthpoint();
  static const int kBirthPointFieldNumber = 2;
  ::google::protobuf::int32 birthpoint() const;
  void set_birthpoint(::google::protobuf::int32 value);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // int32 Hp = 5;
  void clear_hp();
  static const int kHpFieldNumber = 5;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // int32 attack = 6;
  void clear_attack();
  static const int kAttackFieldNumber = 6;
  ::google::protobuf::int32 attack() const;
  void set_attack(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.GhostData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > waypoint_;
  mutable int _waypoint_cached_byte_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 birthpoint_;
  float speed_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 attack_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TreasureChestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.TreasureChestData) */ {
 public:
  TreasureChestData();
  virtual ~TreasureChestData();

  TreasureChestData(const TreasureChestData& from);

  inline TreasureChestData& operator=(const TreasureChestData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreasureChestData(TreasureChestData&& from) noexcept
    : TreasureChestData() {
    *this = ::std::move(from);
  }

  inline TreasureChestData& operator=(TreasureChestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureChestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreasureChestData* internal_default_instance() {
    return reinterpret_cast<const TreasureChestData*>(
               &_TreasureChestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TreasureChestData* other);
  friend void swap(TreasureChestData& a, TreasureChestData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreasureChestData* New() const final {
    return CreateMaybeMessage<TreasureChestData>(NULL);
  }

  TreasureChestData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TreasureChestData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TreasureChestData& from);
  void MergeFrom(const TreasureChestData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasureChestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ItemIdList = 3;
  int itemidlist_size() const;
  void clear_itemidlist();
  static const int kItemIdListFieldNumber = 3;
  ::google::protobuf::int32 itemidlist(int index) const;
  void set_itemidlist(int index, ::google::protobuf::int32 value);
  void add_itemidlist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemidlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemidlist();

  // .TCCamp.Float3 Position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  const ::TCCamp::Float3& _internal_position() const;
  public:
  const ::TCCamp::Float3& position() const;
  ::TCCamp::Float3* release_position();
  ::TCCamp::Float3* mutable_position();
  void set_allocated_position(::TCCamp::Float3* position);

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool BeOpened = 2;
  void clear_beopened();
  static const int kBeOpenedFieldNumber = 2;
  bool beopened() const;
  void set_beopened(bool value);

  // @@protoc_insertion_point(class_scope:TCCamp.TreasureChestData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemidlist_;
  mutable int _itemidlist_cached_byte_size_;
  ::TCCamp::Float3* position_;
  ::google::protobuf::int32 id_;
  bool beopened_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LightData) */ {
 public:
  LightData();
  virtual ~LightData();

  LightData(const LightData& from);

  inline LightData& operator=(const LightData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightData(LightData&& from) noexcept
    : LightData() {
    *this = ::std::move(from);
  }

  inline LightData& operator=(LightData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightData* internal_default_instance() {
    return reinterpret_cast<const LightData*>(
               &_LightData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LightData* other);
  friend void swap(LightData& a, LightData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightData* New() const final {
    return CreateMaybeMessage<LightData>(NULL);
  }

  LightData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightData& from);
  void MergeFrom(const LightData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Float3 Position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::TCCamp::Float3& _internal_position() const;
  public:
  const ::TCCamp::Float3& position() const;
  ::TCCamp::Float3* release_position();
  ::TCCamp::Float3* mutable_position();
  void set_allocated_position(::TCCamp::Float3* position);

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LightData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Float3* position_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelDataReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelDataReq) */ {
 public:
  LevelDataReq();
  virtual ~LevelDataReq();

  LevelDataReq(const LevelDataReq& from);

  inline LevelDataReq& operator=(const LevelDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelDataReq(LevelDataReq&& from) noexcept
    : LevelDataReq() {
    *this = ::std::move(from);
  }

  inline LevelDataReq& operator=(LevelDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelDataReq* internal_default_instance() {
    return reinterpret_cast<const LevelDataReq*>(
               &_LevelDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LevelDataReq* other);
  friend void swap(LevelDataReq& a, LevelDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelDataReq* New() const final {
    return CreateMaybeMessage<LevelDataReq>(NULL);
  }

  LevelDataReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelDataReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelDataReq& from);
  void MergeFrom(const LevelDataReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelDataReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 LevelID = 2;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelDataReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 levelid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelDataRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelDataRsp) */ {
 public:
  LevelDataRsp();
  virtual ~LevelDataRsp();

  LevelDataRsp(const LevelDataRsp& from);

  inline LevelDataRsp& operator=(const LevelDataRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelDataRsp(LevelDataRsp&& from) noexcept
    : LevelDataRsp() {
    *this = ::std::move(from);
  }

  inline LevelDataRsp& operator=(LevelDataRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelDataRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelDataRsp* internal_default_instance() {
    return reinterpret_cast<const LevelDataRsp*>(
               &_LevelDataRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LevelDataRsp* other);
  friend void swap(LevelDataRsp& a, LevelDataRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelDataRsp* New() const final {
    return CreateMaybeMessage<LevelDataRsp>(NULL);
  }

  LevelDataRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelDataRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelDataRsp& from);
  void MergeFrom(const LevelDataRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelDataRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.Float3 GargoylePosition = 4;
  int gargoyleposition_size() const;
  void clear_gargoyleposition();
  static const int kGargoylePositionFieldNumber = 4;
  ::TCCamp::Float3* mutable_gargoyleposition(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >*
      mutable_gargoyleposition();
  const ::TCCamp::Float3& gargoyleposition(int index) const;
  ::TCCamp::Float3* add_gargoyleposition();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >&
      gargoyleposition() const;

  // repeated .TCCamp.GhostData Ghosts = 5;
  int ghosts_size() const;
  void clear_ghosts();
  static const int kGhostsFieldNumber = 5;
  ::TCCamp::GhostData* mutable_ghosts(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostData >*
      mutable_ghosts();
  const ::TCCamp::GhostData& ghosts(int index) const;
  ::TCCamp::GhostData* add_ghosts();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostData >&
      ghosts() const;

  // repeated .TCCamp.TreasureChestData TreasureChest = 6;
  int treasurechest_size() const;
  void clear_treasurechest();
  static const int kTreasureChestFieldNumber = 6;
  ::TCCamp::TreasureChestData* mutable_treasurechest(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestData >*
      mutable_treasurechest();
  const ::TCCamp::TreasureChestData& treasurechest(int index) const;
  ::TCCamp::TreasureChestData* add_treasurechest();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestData >&
      treasurechest() const;

  // repeated .TCCamp.LightData Light = 11;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 11;
  ::TCCamp::LightData* mutable_light(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::LightData >*
      mutable_light();
  const ::TCCamp::LightData& light(int index) const;
  ::TCCamp::LightData* add_light();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::LightData >&
      light() const;

  // repeated .TCCamp.Float3 SlowTrap = 12;
  int slowtrap_size() const;
  void clear_slowtrap();
  static const int kSlowTrapFieldNumber = 12;
  ::TCCamp::Float3* mutable_slowtrap(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >*
      mutable_slowtrap();
  const ::TCCamp::Float3& slowtrap(int index) const;
  ::TCCamp::Float3* add_slowtrap();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >&
      slowtrap() const;

  // repeated .TCCamp.Float3 SpikesTrap = 13;
  int spikestrap_size() const;
  void clear_spikestrap();
  static const int kSpikesTrapFieldNumber = 13;
  ::TCCamp::Float3* mutable_spikestrap(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >*
      mutable_spikestrap();
  const ::TCCamp::Float3& spikestrap(int index) const;
  ::TCCamp::Float3* add_spikestrap();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >&
      spikestrap() const;

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 ResultCode = 1;
  void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::int32 resultcode() const;
  void set_resultcode(::google::protobuf::int32 value);

  // int32 LevelID = 2;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // double PlayerSpeed = 9;
  void clear_playerspeed();
  static const int kPlayerSpeedFieldNumber = 9;
  double playerspeed() const;
  void set_playerspeed(double value);

  // int32 PlayerHP = 10;
  void clear_playerhp();
  static const int kPlayerHPFieldNumber = 10;
  ::google::protobuf::int32 playerhp() const;
  void set_playerhp(::google::protobuf::int32 value);

  // int32 LimitTime = 14;
  void clear_limittime();
  static const int kLimitTimeFieldNumber = 14;
  ::google::protobuf::int32 limittime() const;
  void set_limittime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelDataRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 > gargoyleposition_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostData > ghosts_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestData > treasurechest_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::LightData > light_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 > slowtrap_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 > spikestrap_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 resultcode_;
  ::google::protobuf::int32 levelid_;
  double playerspeed_;
  ::google::protobuf::int32 playerhp_;
  ::google::protobuf::int32 limittime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelStart) */ {
 public:
  LevelStart();
  virtual ~LevelStart();

  LevelStart(const LevelStart& from);

  inline LevelStart& operator=(const LevelStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelStart(LevelStart&& from) noexcept
    : LevelStart() {
    *this = ::std::move(from);
  }

  inline LevelStart& operator=(LevelStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelStart* internal_default_instance() {
    return reinterpret_cast<const LevelStart*>(
               &_LevelStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LevelStart* other);
  friend void swap(LevelStart& a, LevelStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelStart* New() const final {
    return CreateMaybeMessage<LevelStart>(NULL);
  }

  LevelStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelStart& from);
  void MergeFrom(const LevelStart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelSettleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelSettleReq) */ {
 public:
  LevelSettleReq();
  virtual ~LevelSettleReq();

  LevelSettleReq(const LevelSettleReq& from);

  inline LevelSettleReq& operator=(const LevelSettleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelSettleReq(LevelSettleReq&& from) noexcept
    : LevelSettleReq() {
    *this = ::std::move(from);
  }

  inline LevelSettleReq& operator=(LevelSettleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelSettleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelSettleReq* internal_default_instance() {
    return reinterpret_cast<const LevelSettleReq*>(
               &_LevelSettleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LevelSettleReq* other);
  friend void swap(LevelSettleReq& a, LevelSettleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelSettleReq* New() const final {
    return CreateMaybeMessage<LevelSettleReq>(NULL);
  }

  LevelSettleReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelSettleReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelSettleReq& from);
  void MergeFrom(const LevelSettleReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelSettleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 LevelID = 2;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // int32 KillGhost = 3;
  void clear_killghost();
  static const int kKillGhostFieldNumber = 3;
  ::google::protobuf::int32 killghost() const;
  void set_killghost(::google::protobuf::int32 value);

  // float SpendTime = 4;
  void clear_spendtime();
  static const int kSpendTimeFieldNumber = 4;
  float spendtime() const;
  void set_spendtime(float value);

  // int32 Gold = 5;
  void clear_gold();
  static const int kGoldFieldNumber = 5;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // bool Win = 6;
  void clear_win();
  static const int kWinFieldNumber = 6;
  bool win() const;
  void set_win(bool value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelSettleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 killghost_;
  float spendtime_;
  ::google::protobuf::int32 gold_;
  bool win_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelSettleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelSettleRsp) */ {
 public:
  LevelSettleRsp();
  virtual ~LevelSettleRsp();

  LevelSettleRsp(const LevelSettleRsp& from);

  inline LevelSettleRsp& operator=(const LevelSettleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelSettleRsp(LevelSettleRsp&& from) noexcept
    : LevelSettleRsp() {
    *this = ::std::move(from);
  }

  inline LevelSettleRsp& operator=(LevelSettleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelSettleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelSettleRsp* internal_default_instance() {
    return reinterpret_cast<const LevelSettleRsp*>(
               &_LevelSettleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(LevelSettleRsp* other);
  friend void swap(LevelSettleRsp& a, LevelSettleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelSettleRsp* New() const final {
    return CreateMaybeMessage<LevelSettleRsp>(NULL);
  }

  LevelSettleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelSettleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelSettleRsp& from);
  void MergeFrom(const LevelSettleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelSettleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ResultCode = 1;
  void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::int32 resultcode() const;
  void set_resultcode(::google::protobuf::int32 value);

  // int32 Score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelSettleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 resultcode_;
  ::google::protobuf::int32 score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankReq) */ {
 public:
  RankReq();
  virtual ~RankReq();

  RankReq(const RankReq& from);

  inline RankReq& operator=(const RankReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankReq(RankReq&& from) noexcept
    : RankReq() {
    *this = ::std::move(from);
  }

  inline RankReq& operator=(RankReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankReq* internal_default_instance() {
    return reinterpret_cast<const RankReq*>(
               &_RankReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(RankReq* other);
  friend void swap(RankReq& a, RankReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankReq* New() const final {
    return CreateMaybeMessage<RankReq>(NULL);
  }

  RankReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankReq& from);
  void MergeFrom(const RankReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 page = 2;
  void clear_page();
  static const int kPageFieldNumber = 2;
  ::google::protobuf::int32 page() const;
  void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RankReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 page_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankItem) */ {
 public:
  RankItem();
  virtual ~RankItem();

  RankItem(const RankItem& from);

  inline RankItem& operator=(const RankItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankItem(RankItem&& from) noexcept
    : RankItem() {
    *this = ::std::move(from);
  }

  inline RankItem& operator=(RankItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankItem* internal_default_instance() {
    return reinterpret_cast<const RankItem*>(
               &_RankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RankItem* other);
  friend void swap(RankItem& a, RankItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankItem* New() const final {
    return CreateMaybeMessage<RankItem>(NULL);
  }

  RankItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankItem& from);
  void MergeFrom(const RankItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 Rank = 1;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // int32 Gold = 4;
  void clear_gold();
  static const int kGoldFieldNumber = 4;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // int32 Score = 5;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RankItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankRsp) */ {
 public:
  RankRsp();
  virtual ~RankRsp();

  RankRsp(const RankRsp& from);

  inline RankRsp& operator=(const RankRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankRsp(RankRsp&& from) noexcept
    : RankRsp() {
    *this = ::std::move(from);
  }

  inline RankRsp& operator=(RankRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankRsp* internal_default_instance() {
    return reinterpret_cast<const RankRsp*>(
               &_RankRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RankRsp* other);
  friend void swap(RankRsp& a, RankRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankRsp* New() const final {
    return CreateMaybeMessage<RankRsp>(NULL);
  }

  RankRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankRsp& from);
  void MergeFrom(const RankRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.RankItem Rank = 2;
  int rank_size() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  ::TCCamp::RankItem* mutable_rank(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RankItem >*
      mutable_rank();
  const ::TCCamp::RankItem& rank(int index) const;
  ::TCCamp::RankItem* add_rank();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::RankItem >&
      rank() const;

  // .TCCamp.RankItem PlayerRank = 3;
  bool has_playerrank() const;
  void clear_playerrank();
  static const int kPlayerRankFieldNumber = 3;
  private:
  const ::TCCamp::RankItem& _internal_playerrank() const;
  public:
  const ::TCCamp::RankItem& playerrank() const;
  ::TCCamp::RankItem* release_playerrank();
  ::TCCamp::RankItem* mutable_playerrank();
  void set_allocated_playerrank(::TCCamp::RankItem* playerrank);

  // int32 ResultCode = 1;
  void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::int32 resultcode() const;
  void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RankRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RankItem > rank_;
  ::TCCamp::RankItem* playerrank_;
  ::google::protobuf::int32 resultcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PosRot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PosRot) */ {
 public:
  PosRot();
  virtual ~PosRot();

  PosRot(const PosRot& from);

  inline PosRot& operator=(const PosRot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PosRot(PosRot&& from) noexcept
    : PosRot() {
    *this = ::std::move(from);
  }

  inline PosRot& operator=(PosRot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PosRot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PosRot* internal_default_instance() {
    return reinterpret_cast<const PosRot*>(
               &_PosRot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(PosRot* other);
  friend void swap(PosRot& a, PosRot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PosRot* New() const final {
    return CreateMaybeMessage<PosRot>(NULL);
  }

  PosRot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PosRot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PosRot& from);
  void MergeFrom(const PosRot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosRot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Float3 Position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::TCCamp::Float3& _internal_position() const;
  public:
  const ::TCCamp::Float3& position() const;
  ::TCCamp::Float3* release_position();
  ::TCCamp::Float3* mutable_position();
  void set_allocated_position(::TCCamp::Float3* position);

  // .TCCamp.Float4 Rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  private:
  const ::TCCamp::Float4& _internal_rotation() const;
  public:
  const ::TCCamp::Float4& rotation() const;
  ::TCCamp::Float4* release_rotation();
  ::TCCamp::Float4* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Float4* rotation);

  // @@protoc_insertion_point(class_scope:TCCamp.PosRot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Float3* position_;
  ::TCCamp::Float4* rotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GhostState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GhostState) */ {
 public:
  GhostState();
  virtual ~GhostState();

  GhostState(const GhostState& from);

  inline GhostState& operator=(const GhostState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GhostState(GhostState&& from) noexcept
    : GhostState() {
    *this = ::std::move(from);
  }

  inline GhostState& operator=(GhostState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GhostState* internal_default_instance() {
    return reinterpret_cast<const GhostState*>(
               &_GhostState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GhostState* other);
  friend void swap(GhostState& a, GhostState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GhostState* New() const final {
    return CreateMaybeMessage<GhostState>(NULL);
  }

  GhostState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GhostState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GhostState& from);
  void MergeFrom(const GhostState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GhostState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.PosRot GhostTransform = 2;
  bool has_ghosttransform() const;
  void clear_ghosttransform();
  static const int kGhostTransformFieldNumber = 2;
  private:
  const ::TCCamp::PosRot& _internal_ghosttransform() const;
  public:
  const ::TCCamp::PosRot& ghosttransform() const;
  ::TCCamp::PosRot* release_ghosttransform();
  ::TCCamp::PosRot* mutable_ghosttransform();
  void set_allocated_ghosttransform(::TCCamp::PosRot* ghosttransform);

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 NextWayPoint = 3;
  void clear_nextwaypoint();
  static const int kNextWayPointFieldNumber = 3;
  ::google::protobuf::int32 nextwaypoint() const;
  void set_nextwaypoint(::google::protobuf::int32 value);

  // int32 Hp = 4;
  void clear_hp();
  static const int kHpFieldNumber = 4;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // int32 Attack = 5;
  void clear_attack();
  static const int kAttackFieldNumber = 5;
  ::google::protobuf::int32 attack() const;
  void set_attack(::google::protobuf::int32 value);

  // float Speed = 6;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  float speed() const;
  void set_speed(float value);

  // int32 Mode = 7;
  void clear_mode();
  static const int kModeFieldNumber = 7;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // float solveThreshold = 9;
  void clear_solvethreshold();
  static const int kSolveThresholdFieldNumber = 9;
  float solvethreshold() const;
  void set_solvethreshold(float value);

  // bool IsSolving = 8;
  void clear_issolving();
  static const int kIsSolvingFieldNumber = 8;
  bool issolving() const;
  void set_issolving(bool value);

  // bool IsGhostActive = 10;
  void clear_isghostactive();
  static const int kIsGhostActiveFieldNumber = 10;
  bool isghostactive() const;
  void set_isghostactive(bool value);

  // @@protoc_insertion_point(class_scope:TCCamp.GhostState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::PosRot* ghosttransform_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 nextwaypoint_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 attack_;
  float speed_;
  ::google::protobuf::int32 mode_;
  float solvethreshold_;
  bool issolving_;
  bool isghostactive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.IntPair) */ {
 public:
  IntPair();
  virtual ~IntPair();

  IntPair(const IntPair& from);

  inline IntPair& operator=(const IntPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntPair(IntPair&& from) noexcept
    : IntPair() {
    *this = ::std::move(from);
  }

  inline IntPair& operator=(IntPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntPair* internal_default_instance() {
    return reinterpret_cast<const IntPair*>(
               &_IntPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(IntPair* other);
  friend void swap(IntPair& a, IntPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntPair* New() const final {
    return CreateMaybeMessage<IntPair>(NULL);
  }

  IntPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntPair& from);
  void MergeFrom(const IntPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.IntPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimerID2floatTimes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.TimerID2floatTimes) */ {
 public:
  TimerID2floatTimes();
  virtual ~TimerID2floatTimes();

  TimerID2floatTimes(const TimerID2floatTimes& from);

  inline TimerID2floatTimes& operator=(const TimerID2floatTimes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimerID2floatTimes(TimerID2floatTimes&& from) noexcept
    : TimerID2floatTimes() {
    *this = ::std::move(from);
  }

  inline TimerID2floatTimes& operator=(TimerID2floatTimes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimerID2floatTimes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerID2floatTimes* internal_default_instance() {
    return reinterpret_cast<const TimerID2floatTimes*>(
               &_TimerID2floatTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(TimerID2floatTimes* other);
  friend void swap(TimerID2floatTimes& a, TimerID2floatTimes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimerID2floatTimes* New() const final {
    return CreateMaybeMessage<TimerID2floatTimes>(NULL);
  }

  TimerID2floatTimes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimerID2floatTimes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimerID2floatTimes& from);
  void MergeFrom(const TimerID2floatTimes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerID2floatTimes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float TimeCal = 2;
  void clear_timecal();
  static const int kTimeCalFieldNumber = 2;
  float timecal() const;
  void set_timecal(float value);

  // float TimeInterval = 3;
  void clear_timeinterval();
  static const int kTimeIntervalFieldNumber = 3;
  float timeinterval() const;
  void set_timeinterval(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.TimerID2floatTimes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  float timecal_;
  float timeinterval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TreasureChestState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.TreasureChestState) */ {
 public:
  TreasureChestState();
  virtual ~TreasureChestState();

  TreasureChestState(const TreasureChestState& from);

  inline TreasureChestState& operator=(const TreasureChestState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreasureChestState(TreasureChestState&& from) noexcept
    : TreasureChestState() {
    *this = ::std::move(from);
  }

  inline TreasureChestState& operator=(TreasureChestState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureChestState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreasureChestState* internal_default_instance() {
    return reinterpret_cast<const TreasureChestState*>(
               &_TreasureChestState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TreasureChestState* other);
  friend void swap(TreasureChestState& a, TreasureChestState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreasureChestState* New() const final {
    return CreateMaybeMessage<TreasureChestState>(NULL);
  }

  TreasureChestState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TreasureChestState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TreasureChestState& from);
  void MergeFrom(const TreasureChestState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasureChestState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isOpened = 1;
  void clear_isopened();
  static const int kIsOpenedFieldNumber = 1;
  bool isopened() const;
  void set_isopened(bool value);

  // int32 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.TreasureChestState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isopened_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LightState) */ {
 public:
  LightState();
  virtual ~LightState();

  LightState(const LightState& from);

  inline LightState& operator=(const LightState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightState(LightState&& from) noexcept
    : LightState() {
    *this = ::std::move(from);
  }

  inline LightState& operator=(LightState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightState* internal_default_instance() {
    return reinterpret_cast<const LightState*>(
               &_LightState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(LightState* other);
  friend void swap(LightState& a, LightState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightState* New() const final {
    return CreateMaybeMessage<LightState>(NULL);
  }

  LightState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightState& from);
  void MergeFrom(const LightState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool IsOn = 2;
  void clear_ison();
  static const int kIsOnFieldNumber = 2;
  bool ison() const;
  void set_ison(bool value);

  // float ElapsedTime = 3;
  void clear_elapsedtime();
  static const int kElapsedTimeFieldNumber = 3;
  float elapsedtime() const;
  void set_elapsedtime(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.LightState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  bool ison_;
  float elapsedtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SkillState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SkillState) */ {
 public:
  SkillState();
  virtual ~SkillState();

  SkillState(const SkillState& from);

  inline SkillState& operator=(const SkillState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SkillState(SkillState&& from) noexcept
    : SkillState() {
    *this = ::std::move(from);
  }

  inline SkillState& operator=(SkillState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillState* internal_default_instance() {
    return reinterpret_cast<const SkillState*>(
               &_SkillState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SkillState* other);
  friend void swap(SkillState& a, SkillState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillState* New() const final {
    return CreateMaybeMessage<SkillState>(NULL);
  }

  SkillState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SkillState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SkillState& from);
  void MergeFrom(const SkillState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool IsActive = 2;
  void clear_isactive();
  static const int kIsActiveFieldNumber = 2;
  bool isactive() const;
  void set_isactive(bool value);

  // float ColdTimeLeft = 3;
  void clear_coldtimeleft();
  static const int kColdTimeLeftFieldNumber = 3;
  float coldtimeleft() const;
  void set_coldtimeleft(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.SkillState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  bool isactive_;
  float coldtimeleft_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlowState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SlowState) */ {
 public:
  SlowState();
  virtual ~SlowState();

  SlowState(const SlowState& from);

  inline SlowState& operator=(const SlowState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlowState(SlowState&& from) noexcept
    : SlowState() {
    *this = ::std::move(from);
  }

  inline SlowState& operator=(SlowState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlowState* internal_default_instance() {
    return reinterpret_cast<const SlowState*>(
               &_SlowState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SlowState* other);
  friend void swap(SlowState& a, SlowState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlowState* New() const final {
    return CreateMaybeMessage<SlowState>(NULL);
  }

  SlowState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SlowState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SlowState& from);
  void MergeFrom(const SlowState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlowState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float SlowSpeed = 2;
  void clear_slowspeed();
  static const int kSlowSpeedFieldNumber = 2;
  float slowspeed() const;
  void set_slowspeed(float value);

  // float LeftTime = 3;
  void clear_lefttime();
  static const int kLeftTimeFieldNumber = 3;
  float lefttime() const;
  void set_lefttime(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.SlowState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float slowspeed_;
  float lefttime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GhostTimer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GhostTimer) */ {
 public:
  GhostTimer();
  virtual ~GhostTimer();

  GhostTimer(const GhostTimer& from);

  inline GhostTimer& operator=(const GhostTimer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GhostTimer(GhostTimer&& from) noexcept
    : GhostTimer() {
    *this = ::std::move(from);
  }

  inline GhostTimer& operator=(GhostTimer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostTimer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GhostTimer* internal_default_instance() {
    return reinterpret_cast<const GhostTimer*>(
               &_GhostTimer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GhostTimer* other);
  friend void swap(GhostTimer& a, GhostTimer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GhostTimer* New() const final {
    return CreateMaybeMessage<GhostTimer>(NULL);
  }

  GhostTimer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GhostTimer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GhostTimer& from);
  void MergeFrom(const GhostTimer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GhostTimer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 GhostID = 1;
  void clear_ghostid();
  static const int kGhostIDFieldNumber = 1;
  ::google::protobuf::int32 ghostid() const;
  void set_ghostid(::google::protobuf::int32 value);

  // float LeftTime = 2;
  void clear_lefttime();
  static const int kLeftTimeFieldNumber = 2;
  float lefttime() const;
  void set_lefttime(float value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.GhostTimer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ghostid_;
  float lefttime_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LevelState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.LevelState) */ {
 public:
  LevelState();
  virtual ~LevelState();

  LevelState(const LevelState& from);

  inline LevelState& operator=(const LevelState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LevelState(LevelState&& from) noexcept
    : LevelState() {
    *this = ::std::move(from);
  }

  inline LevelState& operator=(LevelState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelState* internal_default_instance() {
    return reinterpret_cast<const LevelState*>(
               &_LevelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(LevelState* other);
  friend void swap(LevelState& a, LevelState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LevelState* New() const final {
    return CreateMaybeMessage<LevelState>(NULL);
  }

  LevelState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LevelState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LevelState& from);
  void MergeFrom(const LevelState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.GhostState GhostStateList = 5;
  int ghoststatelist_size() const;
  void clear_ghoststatelist();
  static const int kGhostStateListFieldNumber = 5;
  ::TCCamp::GhostState* mutable_ghoststatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostState >*
      mutable_ghoststatelist();
  const ::TCCamp::GhostState& ghoststatelist(int index) const;
  ::TCCamp::GhostState* add_ghoststatelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostState >&
      ghoststatelist() const;

  // repeated .TCCamp.TreasureChestState TreasureChestStateList = 6;
  int treasurecheststatelist_size() const;
  void clear_treasurecheststatelist();
  static const int kTreasureChestStateListFieldNumber = 6;
  ::TCCamp::TreasureChestState* mutable_treasurecheststatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestState >*
      mutable_treasurecheststatelist();
  const ::TCCamp::TreasureChestState& treasurecheststatelist(int index) const;
  ::TCCamp::TreasureChestState* add_treasurecheststatelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestState >&
      treasurecheststatelist() const;

  // repeated .TCCamp.SkillState SkillStateList = 7;
  int skillstatelist_size() const;
  void clear_skillstatelist();
  static const int kSkillStateListFieldNumber = 7;
  ::TCCamp::SkillState* mutable_skillstatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SkillState >*
      mutable_skillstatelist();
  const ::TCCamp::SkillState& skillstatelist(int index) const;
  ::TCCamp::SkillState* add_skillstatelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::SkillState >&
      skillstatelist() const;

  // repeated .TCCamp.LightState LightStateList = 8;
  int lightstatelist_size() const;
  void clear_lightstatelist();
  static const int kLightStateListFieldNumber = 8;
  ::TCCamp::LightState* mutable_lightstatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::LightState >*
      mutable_lightstatelist();
  const ::TCCamp::LightState& lightstatelist(int index) const;
  ::TCCamp::LightState* add_lightstatelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::LightState >&
      lightstatelist() const;

  // repeated .TCCamp.IntPair GhostSendbackAdmin = 9;
  int ghostsendbackadmin_size() const;
  void clear_ghostsendbackadmin();
  static const int kGhostSendbackAdminFieldNumber = 9;
  ::TCCamp::IntPair* mutable_ghostsendbackadmin(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >*
      mutable_ghostsendbackadmin();
  const ::TCCamp::IntPair& ghostsendbackadmin(int index) const;
  ::TCCamp::IntPair* add_ghostsendbackadmin();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >&
      ghostsendbackadmin() const;

  // repeated .TCCamp.IntPair DeactiveTimerID2GhostID = 10;
  int deactivetimerid2ghostid_size() const;
  void clear_deactivetimerid2ghostid();
  static const int kDeactiveTimerID2GhostIDFieldNumber = 10;
  ::TCCamp::IntPair* mutable_deactivetimerid2ghostid(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >*
      mutable_deactivetimerid2ghostid();
  const ::TCCamp::IntPair& deactivetimerid2ghostid(int index) const;
  ::TCCamp::IntPair* add_deactivetimerid2ghostid();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >&
      deactivetimerid2ghostid() const;

  // repeated .TCCamp.IntPair SponceTimerID2GhostID = 11;
  int sponcetimerid2ghostid_size() const;
  void clear_sponcetimerid2ghostid();
  static const int kSponceTimerID2GhostIDFieldNumber = 11;
  ::TCCamp::IntPair* mutable_sponcetimerid2ghostid(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >*
      mutable_sponcetimerid2ghostid();
  const ::TCCamp::IntPair& sponcetimerid2ghostid(int index) const;
  ::TCCamp::IntPair* add_sponcetimerid2ghostid();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >&
      sponcetimerid2ghostid() const;

  // repeated .TCCamp.TimerID2floatTimes TimerID2Times = 12;
  int timerid2times_size() const;
  void clear_timerid2times();
  static const int kTimerID2TimesFieldNumber = 12;
  ::TCCamp::TimerID2floatTimes* mutable_timerid2times(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::TimerID2floatTimes >*
      mutable_timerid2times();
  const ::TCCamp::TimerID2floatTimes& timerid2times(int index) const;
  ::TCCamp::TimerID2floatTimes* add_timerid2times();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::TimerID2floatTimes >&
      timerid2times() const;

  // repeated .TCCamp.GhostTimer GhostTimerList = 15;
  int ghosttimerlist_size() const;
  void clear_ghosttimerlist();
  static const int kGhostTimerListFieldNumber = 15;
  ::TCCamp::GhostTimer* mutable_ghosttimerlist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostTimer >*
      mutable_ghosttimerlist();
  const ::TCCamp::GhostTimer& ghosttimerlist(int index) const;
  ::TCCamp::GhostTimer* add_ghosttimerlist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostTimer >&
      ghosttimerlist() const;

  // .TCCamp.PosRot PlayerTransform = 3;
  bool has_playertransform() const;
  void clear_playertransform();
  static const int kPlayerTransformFieldNumber = 3;
  private:
  const ::TCCamp::PosRot& _internal_playertransform() const;
  public:
  const ::TCCamp::PosRot& playertransform() const;
  ::TCCamp::PosRot* release_playertransform();
  ::TCCamp::PosRot* mutable_playertransform();
  void set_allocated_playertransform(::TCCamp::PosRot* playertransform);

  // .TCCamp.SlowState PlayerSlowState = 13;
  bool has_playerslowstate() const;
  void clear_playerslowstate();
  static const int kPlayerSlowStateFieldNumber = 13;
  private:
  const ::TCCamp::SlowState& _internal_playerslowstate() const;
  public:
  const ::TCCamp::SlowState& playerslowstate() const;
  ::TCCamp::SlowState* release_playerslowstate();
  ::TCCamp::SlowState* mutable_playerslowstate();
  void set_allocated_playerslowstate(::TCCamp::SlowState* playerslowstate);

  // int32 KillGhost = 1;
  void clear_killghost();
  static const int kKillGhostFieldNumber = 1;
  ::google::protobuf::int32 killghost() const;
  void set_killghost(::google::protobuf::int32 value);

  // float TimeDuration = 2;
  void clear_timeduration();
  static const int kTimeDurationFieldNumber = 2;
  float timeduration() const;
  void set_timeduration(float value);

  // int32 PlayerHP = 4;
  void clear_playerhp();
  static const int kPlayerHPFieldNumber = 4;
  ::google::protobuf::int32 playerhp() const;
  void set_playerhp(::google::protobuf::int32 value);

  // int32 LevelID = 14;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 14;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.LevelState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostState > ghoststatelist_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestState > treasurecheststatelist_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SkillState > skillstatelist_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::LightState > lightstatelist_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair > ghostsendbackadmin_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair > deactivetimerid2ghostid_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair > sponcetimerid2ghostid_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::TimerID2floatTimes > timerid2times_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostTimer > ghosttimerlist_;
  ::TCCamp::PosRot* playertransform_;
  ::TCCamp::SlowState* playerslowstate_;
  ::google::protobuf::int32 killghost_;
  float timeduration_;
  ::google::protobuf::int32 playerhp_;
  ::google::protobuf::int32 levelid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReconnectPkg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ReconnectPkg) */ {
 public:
  ReconnectPkg();
  virtual ~ReconnectPkg();

  ReconnectPkg(const ReconnectPkg& from);

  inline ReconnectPkg& operator=(const ReconnectPkg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReconnectPkg(ReconnectPkg&& from) noexcept
    : ReconnectPkg() {
    *this = ::std::move(from);
  }

  inline ReconnectPkg& operator=(ReconnectPkg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectPkg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconnectPkg* internal_default_instance() {
    return reinterpret_cast<const ReconnectPkg*>(
               &_ReconnectPkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ReconnectPkg* other);
  friend void swap(ReconnectPkg& a, ReconnectPkg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReconnectPkg* New() const final {
    return CreateMaybeMessage<ReconnectPkg>(NULL);
  }

  ReconnectPkg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReconnectPkg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReconnectPkg& from);
  void MergeFrom(const ReconnectPkg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconnectPkg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.LevelDataRsp LevelData = 1;
  bool has_leveldata() const;
  void clear_leveldata();
  static const int kLevelDataFieldNumber = 1;
  private:
  const ::TCCamp::LevelDataRsp& _internal_leveldata() const;
  public:
  const ::TCCamp::LevelDataRsp& leveldata() const;
  ::TCCamp::LevelDataRsp* release_leveldata();
  ::TCCamp::LevelDataRsp* mutable_leveldata();
  void set_allocated_leveldata(::TCCamp::LevelDataRsp* leveldata);

  // .TCCamp.LevelState State = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::TCCamp::LevelState& _internal_state() const;
  public:
  const ::TCCamp::LevelState& state() const;
  ::TCCamp::LevelState* release_state();
  ::TCCamp::LevelState* mutable_state();
  void set_allocated_state(::TCCamp::LevelState* state);

  // @@protoc_insertion_point(class_scope:TCCamp.ReconnectPkg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::LevelDataRsp* leveldata_;
  ::TCCamp::LevelState* state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerSaveFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ServerSaveFile) */ {
 public:
  ServerSaveFile();
  virtual ~ServerSaveFile();

  ServerSaveFile(const ServerSaveFile& from);

  inline ServerSaveFile& operator=(const ServerSaveFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerSaveFile(ServerSaveFile&& from) noexcept
    : ServerSaveFile() {
    *this = ::std::move(from);
  }

  inline ServerSaveFile& operator=(ServerSaveFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerSaveFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSaveFile* internal_default_instance() {
    return reinterpret_cast<const ServerSaveFile*>(
               &_ServerSaveFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ServerSaveFile* other);
  friend void swap(ServerSaveFile& a, ServerSaveFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerSaveFile* New() const final {
    return CreateMaybeMessage<ServerSaveFile>(NULL);
  }

  ServerSaveFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerSaveFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerSaveFile& from);
  void MergeFrom(const ServerSaveFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSaveFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.LevelState save = 2;
  bool has_save() const;
  void clear_save();
  static const int kSaveFieldNumber = 2;
  private:
  const ::TCCamp::LevelState& _internal_save() const;
  public:
  const ::TCCamp::LevelState& save() const;
  ::TCCamp::LevelState* release_save();
  ::TCCamp::LevelState* mutable_save();
  void set_allocated_save(::TCCamp::LevelState* save);

  // int32 LevelID = 1;
  void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  ::google::protobuf::int32 levelid() const;
  void set_levelid(::google::protobuf::int32 value);

  // int32 SpendTime = 3;
  void clear_spendtime();
  static const int kSpendTimeFieldNumber = 3;
  ::google::protobuf::int32 spendtime() const;
  void set_spendtime(::google::protobuf::int32 value);

  // int64 SaveTime = 4;
  void clear_savetime();
  static const int kSaveTimeFieldNumber = 4;
  ::google::protobuf::int64 savetime() const;
  void set_savetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ServerSaveFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::LevelState* save_;
  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 spendtime_;
  ::google::protobuf::int64 savetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_level_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LevelListReq

// string PlayerID = 1;
inline void LevelListReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelListReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelListReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void LevelListReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelListReq.PlayerID)
}
#if LANG_CXX11
inline void LevelListReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelListReq.PlayerID)
}
#endif
inline void LevelListReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelListReq.PlayerID)
}
inline void LevelListReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelListReq.PlayerID)
}
inline ::std::string* LevelListReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelListReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelListReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelListReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelListReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelListReq.PlayerID)
}

// -------------------------------------------------------------------

// LevelListItem

// int32 LevelID = 1;
inline void LevelListItem::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelListItem::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelListItem.LevelID)
  return levelid_;
}
inline void LevelListItem::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelListItem.LevelID)
}

// string Name = 2;
inline void LevelListItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelListItem::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelListItem.Name)
  return name_.GetNoArena();
}
inline void LevelListItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelListItem.Name)
}
#if LANG_CXX11
inline void LevelListItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelListItem.Name)
}
#endif
inline void LevelListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelListItem.Name)
}
inline void LevelListItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelListItem.Name)
}
inline ::std::string* LevelListItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelListItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelListItem::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelListItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelListItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelListItem.Name)
}

// -------------------------------------------------------------------

// LevelListRsp

// int32 ResultCode = 1;
inline void LevelListRsp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::google::protobuf::int32 LevelListRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelListRsp.ResultCode)
  return resultcode_;
}
inline void LevelListRsp::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelListRsp.ResultCode)
}

// repeated .TCCamp.LevelListItem LevelList = 2;
inline int LevelListRsp::levellist_size() const {
  return levellist_.size();
}
inline void LevelListRsp::clear_levellist() {
  levellist_.Clear();
}
inline ::TCCamp::LevelListItem* LevelListRsp::mutable_levellist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelListRsp.LevelList)
  return levellist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::LevelListItem >*
LevelListRsp::mutable_levellist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelListRsp.LevelList)
  return &levellist_;
}
inline const ::TCCamp::LevelListItem& LevelListRsp::levellist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelListRsp.LevelList)
  return levellist_.Get(index);
}
inline ::TCCamp::LevelListItem* LevelListRsp::add_levellist() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelListRsp.LevelList)
  return levellist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::LevelListItem >&
LevelListRsp::levellist() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelListRsp.LevelList)
  return levellist_;
}

// -------------------------------------------------------------------

// LevelDetailReq

// string PlayerID = 1;
inline void LevelDetailReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelDetailReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void LevelDetailReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailReq.PlayerID)
}
#if LANG_CXX11
inline void LevelDetailReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelDetailReq.PlayerID)
}
#endif
inline void LevelDetailReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelDetailReq.PlayerID)
}
inline void LevelDetailReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelDetailReq.PlayerID)
}
inline ::std::string* LevelDetailReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDetailReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelDetailReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelDetailReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelDetailReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelDetailReq.PlayerID)
}

// int32 LevelID = 2;
inline void LevelDetailReq::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelDetailReq::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailReq.LevelID)
  return levelid_;
}
inline void LevelDetailReq::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailReq.LevelID)
}

// -------------------------------------------------------------------

// LevelDetailRsp

// int32 ResultCode = 1;
inline void LevelDetailRsp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.ResultCode)
  return resultcode_;
}
inline void LevelDetailRsp::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.ResultCode)
}

// int32 LevelID = 2;
inline void LevelDetailRsp::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.LevelID)
  return levelid_;
}
inline void LevelDetailRsp::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.LevelID)
}

// string Name = 3;
inline void LevelDetailRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelDetailRsp::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.Name)
  return name_.GetNoArena();
}
inline void LevelDetailRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.Name)
}
#if LANG_CXX11
inline void LevelDetailRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelDetailRsp.Name)
}
#endif
inline void LevelDetailRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelDetailRsp.Name)
}
inline void LevelDetailRsp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelDetailRsp.Name)
}
inline ::std::string* LevelDetailRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDetailRsp.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelDetailRsp::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelDetailRsp.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelDetailRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelDetailRsp.Name)
}

// string Detail = 4;
inline void LevelDetailRsp::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelDetailRsp::detail() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.Detail)
  return detail_.GetNoArena();
}
inline void LevelDetailRsp::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.Detail)
}
#if LANG_CXX11
inline void LevelDetailRsp::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelDetailRsp.Detail)
}
#endif
inline void LevelDetailRsp::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelDetailRsp.Detail)
}
inline void LevelDetailRsp::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelDetailRsp.Detail)
}
inline ::std::string* LevelDetailRsp::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDetailRsp.Detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelDetailRsp::release_detail() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelDetailRsp.Detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelDetailRsp::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelDetailRsp.Detail)
}

// int32 GhostQuantity = 5;
inline void LevelDetailRsp::clear_ghostquantity() {
  ghostquantity_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::ghostquantity() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.GhostQuantity)
  return ghostquantity_;
}
inline void LevelDetailRsp::set_ghostquantity(::google::protobuf::int32 value) {
  
  ghostquantity_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.GhostQuantity)
}

// int32 GargoyleQuantity = 6;
inline void LevelDetailRsp::clear_gargoylequantity() {
  gargoylequantity_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::gargoylequantity() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.GargoyleQuantity)
  return gargoylequantity_;
}
inline void LevelDetailRsp::set_gargoylequantity(::google::protobuf::int32 value) {
  
  gargoylequantity_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.GargoyleQuantity)
}

// int32 TreasureChestQuantity = 7;
inline void LevelDetailRsp::clear_treasurechestquantity() {
  treasurechestquantity_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::treasurechestquantity() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.TreasureChestQuantity)
  return treasurechestquantity_;
}
inline void LevelDetailRsp::set_treasurechestquantity(::google::protobuf::int32 value) {
  
  treasurechestquantity_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.TreasureChestQuantity)
}

// double GhostSpeed = 8;
inline void LevelDetailRsp::clear_ghostspeed() {
  ghostspeed_ = 0;
}
inline double LevelDetailRsp::ghostspeed() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.GhostSpeed)
  return ghostspeed_;
}
inline void LevelDetailRsp::set_ghostspeed(double value) {
  
  ghostspeed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.GhostSpeed)
}

// double PlayerSpeed = 9;
inline void LevelDetailRsp::clear_playerspeed() {
  playerspeed_ = 0;
}
inline double LevelDetailRsp::playerspeed() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.PlayerSpeed)
  return playerspeed_;
}
inline void LevelDetailRsp::set_playerspeed(double value) {
  
  playerspeed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.PlayerSpeed)
}

// int32 PlayerHP = 10;
inline void LevelDetailRsp::clear_playerhp() {
  playerhp_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::playerhp() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.PlayerHP)
  return playerhp_;
}
inline void LevelDetailRsp::set_playerhp(::google::protobuf::int32 value) {
  
  playerhp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.PlayerHP)
}

// int32 LimitTime = 11;
inline void LevelDetailRsp::clear_limittime() {
  limittime_ = 0;
}
inline ::google::protobuf::int32 LevelDetailRsp::limittime() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDetailRsp.LimitTime)
  return limittime_;
}
inline void LevelDetailRsp::set_limittime(::google::protobuf::int32 value) {
  
  limittime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDetailRsp.LimitTime)
}

// -------------------------------------------------------------------

// GhostData

// int32 ID = 1;
inline void GhostData::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 GhostData::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostData.ID)
  return id_;
}
inline void GhostData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostData.ID)
}

// int32 BirthPoint = 2;
inline void GhostData::clear_birthpoint() {
  birthpoint_ = 0;
}
inline ::google::protobuf::int32 GhostData::birthpoint() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostData.BirthPoint)
  return birthpoint_;
}
inline void GhostData::set_birthpoint(::google::protobuf::int32 value) {
  
  birthpoint_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostData.BirthPoint)
}

// repeated int32 WayPoint = 3;
inline int GhostData::waypoint_size() const {
  return waypoint_.size();
}
inline void GhostData::clear_waypoint() {
  waypoint_.Clear();
}
inline ::google::protobuf::int32 GhostData::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostData.WayPoint)
  return waypoint_.Get(index);
}
inline void GhostData::set_waypoint(int index, ::google::protobuf::int32 value) {
  waypoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:TCCamp.GhostData.WayPoint)
}
inline void GhostData::add_waypoint(::google::protobuf::int32 value) {
  waypoint_.Add(value);
  // @@protoc_insertion_point(field_add:TCCamp.GhostData.WayPoint)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GhostData::waypoint() const {
  // @@protoc_insertion_point(field_list:TCCamp.GhostData.WayPoint)
  return waypoint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GhostData::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.GhostData.WayPoint)
  return &waypoint_;
}

// float speed = 4;
inline void GhostData::clear_speed() {
  speed_ = 0;
}
inline float GhostData::speed() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostData.speed)
  return speed_;
}
inline void GhostData::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostData.speed)
}

// int32 Hp = 5;
inline void GhostData::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 GhostData::hp() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostData.Hp)
  return hp_;
}
inline void GhostData::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostData.Hp)
}

// int32 attack = 6;
inline void GhostData::clear_attack() {
  attack_ = 0;
}
inline ::google::protobuf::int32 GhostData::attack() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostData.attack)
  return attack_;
}
inline void GhostData::set_attack(::google::protobuf::int32 value) {
  
  attack_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostData.attack)
}

// -------------------------------------------------------------------

// TreasureChestData

// int32 ID = 1;
inline void TreasureChestData::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TreasureChestData::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.TreasureChestData.ID)
  return id_;
}
inline void TreasureChestData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TreasureChestData.ID)
}

// bool BeOpened = 2;
inline void TreasureChestData::clear_beopened() {
  beopened_ = false;
}
inline bool TreasureChestData::beopened() const {
  // @@protoc_insertion_point(field_get:TCCamp.TreasureChestData.BeOpened)
  return beopened_;
}
inline void TreasureChestData::set_beopened(bool value) {
  
  beopened_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TreasureChestData.BeOpened)
}

// repeated int32 ItemIdList = 3;
inline int TreasureChestData::itemidlist_size() const {
  return itemidlist_.size();
}
inline void TreasureChestData::clear_itemidlist() {
  itemidlist_.Clear();
}
inline ::google::protobuf::int32 TreasureChestData::itemidlist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.TreasureChestData.ItemIdList)
  return itemidlist_.Get(index);
}
inline void TreasureChestData::set_itemidlist(int index, ::google::protobuf::int32 value) {
  itemidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:TCCamp.TreasureChestData.ItemIdList)
}
inline void TreasureChestData::add_itemidlist(::google::protobuf::int32 value) {
  itemidlist_.Add(value);
  // @@protoc_insertion_point(field_add:TCCamp.TreasureChestData.ItemIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TreasureChestData::itemidlist() const {
  // @@protoc_insertion_point(field_list:TCCamp.TreasureChestData.ItemIdList)
  return itemidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TreasureChestData::mutable_itemidlist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.TreasureChestData.ItemIdList)
  return &itemidlist_;
}

// .TCCamp.Float3 Position = 4;
inline bool TreasureChestData::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::TCCamp::Float3& TreasureChestData::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Float3& TreasureChestData::position() const {
  const ::TCCamp::Float3* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.TreasureChestData.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Float3*>(
      &::TCCamp::_Float3_default_instance_);
}
inline ::TCCamp::Float3* TreasureChestData::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.TreasureChestData.Position)
  
  ::TCCamp::Float3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Float3* TreasureChestData::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Float3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.TreasureChestData.Position)
  return position_;
}
inline void TreasureChestData::set_allocated_position(::TCCamp::Float3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.TreasureChestData.Position)
}

// -------------------------------------------------------------------

// LightData

// int32 ID = 1;
inline void LightData::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LightData::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.LightData.ID)
  return id_;
}
inline void LightData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LightData.ID)
}

// .TCCamp.Float3 Position = 2;
inline bool LightData::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::TCCamp::Float3& LightData::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Float3& LightData::position() const {
  const ::TCCamp::Float3* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.LightData.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Float3*>(
      &::TCCamp::_Float3_default_instance_);
}
inline ::TCCamp::Float3* LightData::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.LightData.Position)
  
  ::TCCamp::Float3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Float3* LightData::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Float3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.LightData.Position)
  return position_;
}
inline void LightData::set_allocated_position(::TCCamp::Float3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LightData.Position)
}

// -------------------------------------------------------------------

// LevelDataReq

// string PlayerID = 1;
inline void LevelDataReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelDataReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void LevelDataReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataReq.PlayerID)
}
#if LANG_CXX11
inline void LevelDataReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelDataReq.PlayerID)
}
#endif
inline void LevelDataReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelDataReq.PlayerID)
}
inline void LevelDataReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelDataReq.PlayerID)
}
inline ::std::string* LevelDataReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelDataReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelDataReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelDataReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelDataReq.PlayerID)
}

// int32 LevelID = 2;
inline void LevelDataReq::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelDataReq::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataReq.LevelID)
  return levelid_;
}
inline void LevelDataReq::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataReq.LevelID)
}

// -------------------------------------------------------------------

// LevelDataRsp

// int32 ResultCode = 1;
inline void LevelDataRsp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::google::protobuf::int32 LevelDataRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.ResultCode)
  return resultcode_;
}
inline void LevelDataRsp::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataRsp.ResultCode)
}

// int32 LevelID = 2;
inline void LevelDataRsp::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelDataRsp::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.LevelID)
  return levelid_;
}
inline void LevelDataRsp::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataRsp.LevelID)
}

// string Name = 3;
inline void LevelDataRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelDataRsp::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.Name)
  return name_.GetNoArena();
}
inline void LevelDataRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataRsp.Name)
}
#if LANG_CXX11
inline void LevelDataRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelDataRsp.Name)
}
#endif
inline void LevelDataRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelDataRsp.Name)
}
inline void LevelDataRsp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelDataRsp.Name)
}
inline ::std::string* LevelDataRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelDataRsp::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelDataRsp.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelDataRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelDataRsp.Name)
}

// repeated .TCCamp.Float3 GargoylePosition = 4;
inline int LevelDataRsp::gargoyleposition_size() const {
  return gargoyleposition_.size();
}
inline ::TCCamp::Float3* LevelDataRsp::mutable_gargoyleposition(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.GargoylePosition)
  return gargoyleposition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >*
LevelDataRsp::mutable_gargoyleposition() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelDataRsp.GargoylePosition)
  return &gargoyleposition_;
}
inline const ::TCCamp::Float3& LevelDataRsp::gargoyleposition(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.GargoylePosition)
  return gargoyleposition_.Get(index);
}
inline ::TCCamp::Float3* LevelDataRsp::add_gargoyleposition() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelDataRsp.GargoylePosition)
  return gargoyleposition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >&
LevelDataRsp::gargoyleposition() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelDataRsp.GargoylePosition)
  return gargoyleposition_;
}

// repeated .TCCamp.GhostData Ghosts = 5;
inline int LevelDataRsp::ghosts_size() const {
  return ghosts_.size();
}
inline void LevelDataRsp::clear_ghosts() {
  ghosts_.Clear();
}
inline ::TCCamp::GhostData* LevelDataRsp::mutable_ghosts(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.Ghosts)
  return ghosts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostData >*
LevelDataRsp::mutable_ghosts() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelDataRsp.Ghosts)
  return &ghosts_;
}
inline const ::TCCamp::GhostData& LevelDataRsp::ghosts(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.Ghosts)
  return ghosts_.Get(index);
}
inline ::TCCamp::GhostData* LevelDataRsp::add_ghosts() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelDataRsp.Ghosts)
  return ghosts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostData >&
LevelDataRsp::ghosts() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelDataRsp.Ghosts)
  return ghosts_;
}

// repeated .TCCamp.TreasureChestData TreasureChest = 6;
inline int LevelDataRsp::treasurechest_size() const {
  return treasurechest_.size();
}
inline void LevelDataRsp::clear_treasurechest() {
  treasurechest_.Clear();
}
inline ::TCCamp::TreasureChestData* LevelDataRsp::mutable_treasurechest(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.TreasureChest)
  return treasurechest_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestData >*
LevelDataRsp::mutable_treasurechest() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelDataRsp.TreasureChest)
  return &treasurechest_;
}
inline const ::TCCamp::TreasureChestData& LevelDataRsp::treasurechest(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.TreasureChest)
  return treasurechest_.Get(index);
}
inline ::TCCamp::TreasureChestData* LevelDataRsp::add_treasurechest() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelDataRsp.TreasureChest)
  return treasurechest_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestData >&
LevelDataRsp::treasurechest() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelDataRsp.TreasureChest)
  return treasurechest_;
}

// double PlayerSpeed = 9;
inline void LevelDataRsp::clear_playerspeed() {
  playerspeed_ = 0;
}
inline double LevelDataRsp::playerspeed() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.PlayerSpeed)
  return playerspeed_;
}
inline void LevelDataRsp::set_playerspeed(double value) {
  
  playerspeed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataRsp.PlayerSpeed)
}

// int32 PlayerHP = 10;
inline void LevelDataRsp::clear_playerhp() {
  playerhp_ = 0;
}
inline ::google::protobuf::int32 LevelDataRsp::playerhp() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.PlayerHP)
  return playerhp_;
}
inline void LevelDataRsp::set_playerhp(::google::protobuf::int32 value) {
  
  playerhp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataRsp.PlayerHP)
}

// repeated .TCCamp.LightData Light = 11;
inline int LevelDataRsp::light_size() const {
  return light_.size();
}
inline void LevelDataRsp::clear_light() {
  light_.Clear();
}
inline ::TCCamp::LightData* LevelDataRsp::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.Light)
  return light_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::LightData >*
LevelDataRsp::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelDataRsp.Light)
  return &light_;
}
inline const ::TCCamp::LightData& LevelDataRsp::light(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.Light)
  return light_.Get(index);
}
inline ::TCCamp::LightData* LevelDataRsp::add_light() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelDataRsp.Light)
  return light_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::LightData >&
LevelDataRsp::light() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelDataRsp.Light)
  return light_;
}

// repeated .TCCamp.Float3 SlowTrap = 12;
inline int LevelDataRsp::slowtrap_size() const {
  return slowtrap_.size();
}
inline ::TCCamp::Float3* LevelDataRsp::mutable_slowtrap(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.SlowTrap)
  return slowtrap_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >*
LevelDataRsp::mutable_slowtrap() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelDataRsp.SlowTrap)
  return &slowtrap_;
}
inline const ::TCCamp::Float3& LevelDataRsp::slowtrap(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.SlowTrap)
  return slowtrap_.Get(index);
}
inline ::TCCamp::Float3* LevelDataRsp::add_slowtrap() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelDataRsp.SlowTrap)
  return slowtrap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >&
LevelDataRsp::slowtrap() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelDataRsp.SlowTrap)
  return slowtrap_;
}

// repeated .TCCamp.Float3 SpikesTrap = 13;
inline int LevelDataRsp::spikestrap_size() const {
  return spikestrap_.size();
}
inline ::TCCamp::Float3* LevelDataRsp::mutable_spikestrap(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelDataRsp.SpikesTrap)
  return spikestrap_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >*
LevelDataRsp::mutable_spikestrap() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelDataRsp.SpikesTrap)
  return &spikestrap_;
}
inline const ::TCCamp::Float3& LevelDataRsp::spikestrap(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.SpikesTrap)
  return spikestrap_.Get(index);
}
inline ::TCCamp::Float3* LevelDataRsp::add_spikestrap() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelDataRsp.SpikesTrap)
  return spikestrap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::Float3 >&
LevelDataRsp::spikestrap() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelDataRsp.SpikesTrap)
  return spikestrap_;
}

// int32 LimitTime = 14;
inline void LevelDataRsp::clear_limittime() {
  limittime_ = 0;
}
inline ::google::protobuf::int32 LevelDataRsp::limittime() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelDataRsp.LimitTime)
  return limittime_;
}
inline void LevelDataRsp::set_limittime(::google::protobuf::int32 value) {
  
  limittime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelDataRsp.LimitTime)
}

// -------------------------------------------------------------------

// LevelStart

// string PlayerID = 1;
inline void LevelStart::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelStart::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelStart.PlayerID)
  return playerid_.GetNoArena();
}
inline void LevelStart::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelStart.PlayerID)
}
#if LANG_CXX11
inline void LevelStart::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelStart.PlayerID)
}
#endif
inline void LevelStart::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelStart.PlayerID)
}
inline void LevelStart::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelStart.PlayerID)
}
inline ::std::string* LevelStart::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelStart.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelStart::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelStart.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelStart::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelStart.PlayerID)
}

// -------------------------------------------------------------------

// LevelSettleReq

// string PlayerID = 1;
inline void LevelSettleReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LevelSettleReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void LevelSettleReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleReq.PlayerID)
}
#if LANG_CXX11
inline void LevelSettleReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.LevelSettleReq.PlayerID)
}
#endif
inline void LevelSettleReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.LevelSettleReq.PlayerID)
}
inline void LevelSettleReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.LevelSettleReq.PlayerID)
}
inline ::std::string* LevelSettleReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelSettleReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LevelSettleReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelSettleReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LevelSettleReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelSettleReq.PlayerID)
}

// int32 LevelID = 2;
inline void LevelSettleReq::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelSettleReq::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleReq.LevelID)
  return levelid_;
}
inline void LevelSettleReq::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleReq.LevelID)
}

// int32 KillGhost = 3;
inline void LevelSettleReq::clear_killghost() {
  killghost_ = 0;
}
inline ::google::protobuf::int32 LevelSettleReq::killghost() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleReq.KillGhost)
  return killghost_;
}
inline void LevelSettleReq::set_killghost(::google::protobuf::int32 value) {
  
  killghost_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleReq.KillGhost)
}

// float SpendTime = 4;
inline void LevelSettleReq::clear_spendtime() {
  spendtime_ = 0;
}
inline float LevelSettleReq::spendtime() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleReq.SpendTime)
  return spendtime_;
}
inline void LevelSettleReq::set_spendtime(float value) {
  
  spendtime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleReq.SpendTime)
}

// int32 Gold = 5;
inline void LevelSettleReq::clear_gold() {
  gold_ = 0;
}
inline ::google::protobuf::int32 LevelSettleReq::gold() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleReq.Gold)
  return gold_;
}
inline void LevelSettleReq::set_gold(::google::protobuf::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleReq.Gold)
}

// bool Win = 6;
inline void LevelSettleReq::clear_win() {
  win_ = false;
}
inline bool LevelSettleReq::win() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleReq.Win)
  return win_;
}
inline void LevelSettleReq::set_win(bool value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleReq.Win)
}

// -------------------------------------------------------------------

// LevelSettleRsp

// int32 ResultCode = 1;
inline void LevelSettleRsp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::google::protobuf::int32 LevelSettleRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleRsp.ResultCode)
  return resultcode_;
}
inline void LevelSettleRsp::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleRsp.ResultCode)
}

// int32 Score = 3;
inline void LevelSettleRsp::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 LevelSettleRsp::score() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelSettleRsp.Score)
  return score_;
}
inline void LevelSettleRsp::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelSettleRsp.Score)
}

// -------------------------------------------------------------------

// RankReq

// string PlayerID = 1;
inline void RankReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RankReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void RankReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.RankReq.PlayerID)
}
#if LANG_CXX11
inline void RankReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.RankReq.PlayerID)
}
#endif
inline void RankReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.RankReq.PlayerID)
}
inline void RankReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.RankReq.PlayerID)
}
inline ::std::string* RankReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.RankReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.RankReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.RankReq.PlayerID)
}

// int32 page = 2;
inline void RankReq::clear_page() {
  page_ = 0;
}
inline ::google::protobuf::int32 RankReq::page() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankReq.page)
  return page_;
}
inline void RankReq::set_page(::google::protobuf::int32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankReq.page)
}

// -------------------------------------------------------------------

// RankItem

// int32 Rank = 1;
inline void RankItem::clear_rank() {
  rank_ = 0;
}
inline ::google::protobuf::int32 RankItem::rank() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankItem.Rank)
  return rank_;
}
inline void RankItem::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankItem.Rank)
}

// string PlayerID = 2;
inline void RankItem::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RankItem::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankItem.PlayerID)
  return playerid_.GetNoArena();
}
inline void RankItem::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.RankItem.PlayerID)
}
#if LANG_CXX11
inline void RankItem::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.RankItem.PlayerID)
}
#endif
inline void RankItem::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.RankItem.PlayerID)
}
inline void RankItem::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.RankItem.PlayerID)
}
inline ::std::string* RankItem::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.RankItem.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankItem::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.RankItem.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankItem::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.RankItem.PlayerID)
}

// string Name = 3;
inline void RankItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RankItem::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankItem.Name)
  return name_.GetNoArena();
}
inline void RankItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.RankItem.Name)
}
#if LANG_CXX11
inline void RankItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.RankItem.Name)
}
#endif
inline void RankItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.RankItem.Name)
}
inline void RankItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.RankItem.Name)
}
inline ::std::string* RankItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.RankItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankItem::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.RankItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.RankItem.Name)
}

// int32 Gold = 4;
inline void RankItem::clear_gold() {
  gold_ = 0;
}
inline ::google::protobuf::int32 RankItem::gold() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankItem.Gold)
  return gold_;
}
inline void RankItem::set_gold(::google::protobuf::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankItem.Gold)
}

// int32 Score = 5;
inline void RankItem::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 RankItem::score() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankItem.Score)
  return score_;
}
inline void RankItem::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankItem.Score)
}

// -------------------------------------------------------------------

// RankRsp

// int32 ResultCode = 1;
inline void RankRsp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::google::protobuf::int32 RankRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankRsp.ResultCode)
  return resultcode_;
}
inline void RankRsp::set_resultcode(::google::protobuf::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankRsp.ResultCode)
}

// repeated .TCCamp.RankItem Rank = 2;
inline int RankRsp::rank_size() const {
  return rank_.size();
}
inline void RankRsp::clear_rank() {
  rank_.Clear();
}
inline ::TCCamp::RankItem* RankRsp::mutable_rank(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.RankRsp.Rank)
  return rank_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::RankItem >*
RankRsp::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.RankRsp.Rank)
  return &rank_;
}
inline const ::TCCamp::RankItem& RankRsp::rank(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.RankRsp.Rank)
  return rank_.Get(index);
}
inline ::TCCamp::RankItem* RankRsp::add_rank() {
  // @@protoc_insertion_point(field_add:TCCamp.RankRsp.Rank)
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::RankItem >&
RankRsp::rank() const {
  // @@protoc_insertion_point(field_list:TCCamp.RankRsp.Rank)
  return rank_;
}

// .TCCamp.RankItem PlayerRank = 3;
inline bool RankRsp::has_playerrank() const {
  return this != internal_default_instance() && playerrank_ != NULL;
}
inline void RankRsp::clear_playerrank() {
  if (GetArenaNoVirtual() == NULL && playerrank_ != NULL) {
    delete playerrank_;
  }
  playerrank_ = NULL;
}
inline const ::TCCamp::RankItem& RankRsp::_internal_playerrank() const {
  return *playerrank_;
}
inline const ::TCCamp::RankItem& RankRsp::playerrank() const {
  const ::TCCamp::RankItem* p = playerrank_;
  // @@protoc_insertion_point(field_get:TCCamp.RankRsp.PlayerRank)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::RankItem*>(
      &::TCCamp::_RankItem_default_instance_);
}
inline ::TCCamp::RankItem* RankRsp::release_playerrank() {
  // @@protoc_insertion_point(field_release:TCCamp.RankRsp.PlayerRank)
  
  ::TCCamp::RankItem* temp = playerrank_;
  playerrank_ = NULL;
  return temp;
}
inline ::TCCamp::RankItem* RankRsp::mutable_playerrank() {
  
  if (playerrank_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::RankItem>(GetArenaNoVirtual());
    playerrank_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.RankRsp.PlayerRank)
  return playerrank_;
}
inline void RankRsp::set_allocated_playerrank(::TCCamp::RankItem* playerrank) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerrank_;
  }
  if (playerrank) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerrank = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerrank, submessage_arena);
    }
    
  } else {
    
  }
  playerrank_ = playerrank;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.RankRsp.PlayerRank)
}

// -------------------------------------------------------------------

// PosRot

// .TCCamp.Float3 Position = 1;
inline bool PosRot::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::TCCamp::Float3& PosRot::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Float3& PosRot::position() const {
  const ::TCCamp::Float3* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.PosRot.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Float3*>(
      &::TCCamp::_Float3_default_instance_);
}
inline ::TCCamp::Float3* PosRot::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.PosRot.Position)
  
  ::TCCamp::Float3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Float3* PosRot::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Float3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PosRot.Position)
  return position_;
}
inline void PosRot::set_allocated_position(::TCCamp::Float3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PosRot.Position)
}

// .TCCamp.Float4 Rotation = 2;
inline bool PosRot::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline const ::TCCamp::Float4& PosRot::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Float4& PosRot::rotation() const {
  const ::TCCamp::Float4* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.PosRot.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Float4*>(
      &::TCCamp::_Float4_default_instance_);
}
inline ::TCCamp::Float4* PosRot::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.PosRot.Rotation)
  
  ::TCCamp::Float4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Float4* PosRot::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Float4>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PosRot.Rotation)
  return rotation_;
}
inline void PosRot::set_allocated_rotation(::TCCamp::Float4* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PosRot.Rotation)
}

// -------------------------------------------------------------------

// GhostState

// int32 ID = 1;
inline void GhostState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 GhostState::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.ID)
  return id_;
}
inline void GhostState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.ID)
}

// .TCCamp.PosRot GhostTransform = 2;
inline bool GhostState::has_ghosttransform() const {
  return this != internal_default_instance() && ghosttransform_ != NULL;
}
inline void GhostState::clear_ghosttransform() {
  if (GetArenaNoVirtual() == NULL && ghosttransform_ != NULL) {
    delete ghosttransform_;
  }
  ghosttransform_ = NULL;
}
inline const ::TCCamp::PosRot& GhostState::_internal_ghosttransform() const {
  return *ghosttransform_;
}
inline const ::TCCamp::PosRot& GhostState::ghosttransform() const {
  const ::TCCamp::PosRot* p = ghosttransform_;
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.GhostTransform)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PosRot*>(
      &::TCCamp::_PosRot_default_instance_);
}
inline ::TCCamp::PosRot* GhostState::release_ghosttransform() {
  // @@protoc_insertion_point(field_release:TCCamp.GhostState.GhostTransform)
  
  ::TCCamp::PosRot* temp = ghosttransform_;
  ghosttransform_ = NULL;
  return temp;
}
inline ::TCCamp::PosRot* GhostState::mutable_ghosttransform() {
  
  if (ghosttransform_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PosRot>(GetArenaNoVirtual());
    ghosttransform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.GhostState.GhostTransform)
  return ghosttransform_;
}
inline void GhostState::set_allocated_ghosttransform(::TCCamp::PosRot* ghosttransform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ghosttransform_;
  }
  if (ghosttransform) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ghosttransform = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ghosttransform, submessage_arena);
    }
    
  } else {
    
  }
  ghosttransform_ = ghosttransform;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.GhostState.GhostTransform)
}

// int32 NextWayPoint = 3;
inline void GhostState::clear_nextwaypoint() {
  nextwaypoint_ = 0;
}
inline ::google::protobuf::int32 GhostState::nextwaypoint() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.NextWayPoint)
  return nextwaypoint_;
}
inline void GhostState::set_nextwaypoint(::google::protobuf::int32 value) {
  
  nextwaypoint_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.NextWayPoint)
}

// int32 Hp = 4;
inline void GhostState::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 GhostState::hp() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.Hp)
  return hp_;
}
inline void GhostState::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.Hp)
}

// int32 Attack = 5;
inline void GhostState::clear_attack() {
  attack_ = 0;
}
inline ::google::protobuf::int32 GhostState::attack() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.Attack)
  return attack_;
}
inline void GhostState::set_attack(::google::protobuf::int32 value) {
  
  attack_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.Attack)
}

// float Speed = 6;
inline void GhostState::clear_speed() {
  speed_ = 0;
}
inline float GhostState::speed() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.Speed)
  return speed_;
}
inline void GhostState::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.Speed)
}

// int32 Mode = 7;
inline void GhostState::clear_mode() {
  mode_ = 0;
}
inline ::google::protobuf::int32 GhostState::mode() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.Mode)
  return mode_;
}
inline void GhostState::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.Mode)
}

// bool IsSolving = 8;
inline void GhostState::clear_issolving() {
  issolving_ = false;
}
inline bool GhostState::issolving() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.IsSolving)
  return issolving_;
}
inline void GhostState::set_issolving(bool value) {
  
  issolving_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.IsSolving)
}

// float solveThreshold = 9;
inline void GhostState::clear_solvethreshold() {
  solvethreshold_ = 0;
}
inline float GhostState::solvethreshold() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.solveThreshold)
  return solvethreshold_;
}
inline void GhostState::set_solvethreshold(float value) {
  
  solvethreshold_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.solveThreshold)
}

// bool IsGhostActive = 10;
inline void GhostState::clear_isghostactive() {
  isghostactive_ = false;
}
inline bool GhostState::isghostactive() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostState.IsGhostActive)
  return isghostactive_;
}
inline void GhostState::set_isghostactive(bool value) {
  
  isghostactive_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostState.IsGhostActive)
}

// -------------------------------------------------------------------

// IntPair

// int32 a = 1;
inline void IntPair::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 IntPair::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.IntPair.a)
  return a_;
}
inline void IntPair::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.IntPair.a)
}

// int32 b = 2;
inline void IntPair::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 IntPair::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.IntPair.b)
  return b_;
}
inline void IntPair::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.IntPair.b)
}

// -------------------------------------------------------------------

// TimerID2floatTimes

// int32 ID = 1;
inline void TimerID2floatTimes::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TimerID2floatTimes::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.TimerID2floatTimes.ID)
  return id_;
}
inline void TimerID2floatTimes::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TimerID2floatTimes.ID)
}

// float TimeCal = 2;
inline void TimerID2floatTimes::clear_timecal() {
  timecal_ = 0;
}
inline float TimerID2floatTimes::timecal() const {
  // @@protoc_insertion_point(field_get:TCCamp.TimerID2floatTimes.TimeCal)
  return timecal_;
}
inline void TimerID2floatTimes::set_timecal(float value) {
  
  timecal_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TimerID2floatTimes.TimeCal)
}

// float TimeInterval = 3;
inline void TimerID2floatTimes::clear_timeinterval() {
  timeinterval_ = 0;
}
inline float TimerID2floatTimes::timeinterval() const {
  // @@protoc_insertion_point(field_get:TCCamp.TimerID2floatTimes.TimeInterval)
  return timeinterval_;
}
inline void TimerID2floatTimes::set_timeinterval(float value) {
  
  timeinterval_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TimerID2floatTimes.TimeInterval)
}

// -------------------------------------------------------------------

// TreasureChestState

// bool isOpened = 1;
inline void TreasureChestState::clear_isopened() {
  isopened_ = false;
}
inline bool TreasureChestState::isopened() const {
  // @@protoc_insertion_point(field_get:TCCamp.TreasureChestState.isOpened)
  return isopened_;
}
inline void TreasureChestState::set_isopened(bool value) {
  
  isopened_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TreasureChestState.isOpened)
}

// int32 ID = 2;
inline void TreasureChestState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TreasureChestState::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.TreasureChestState.ID)
  return id_;
}
inline void TreasureChestState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.TreasureChestState.ID)
}

// -------------------------------------------------------------------

// LightState

// int32 ID = 1;
inline void LightState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LightState::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.LightState.ID)
  return id_;
}
inline void LightState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LightState.ID)
}

// bool IsOn = 2;
inline void LightState::clear_ison() {
  ison_ = false;
}
inline bool LightState::ison() const {
  // @@protoc_insertion_point(field_get:TCCamp.LightState.IsOn)
  return ison_;
}
inline void LightState::set_ison(bool value) {
  
  ison_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LightState.IsOn)
}

// float ElapsedTime = 3;
inline void LightState::clear_elapsedtime() {
  elapsedtime_ = 0;
}
inline float LightState::elapsedtime() const {
  // @@protoc_insertion_point(field_get:TCCamp.LightState.ElapsedTime)
  return elapsedtime_;
}
inline void LightState::set_elapsedtime(float value) {
  
  elapsedtime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LightState.ElapsedTime)
}

// -------------------------------------------------------------------

// SkillState

// int32 ID = 1;
inline void SkillState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SkillState::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.SkillState.ID)
  return id_;
}
inline void SkillState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SkillState.ID)
}

// bool IsActive = 2;
inline void SkillState::clear_isactive() {
  isactive_ = false;
}
inline bool SkillState::isactive() const {
  // @@protoc_insertion_point(field_get:TCCamp.SkillState.IsActive)
  return isactive_;
}
inline void SkillState::set_isactive(bool value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SkillState.IsActive)
}

// float ColdTimeLeft = 3;
inline void SkillState::clear_coldtimeleft() {
  coldtimeleft_ = 0;
}
inline float SkillState::coldtimeleft() const {
  // @@protoc_insertion_point(field_get:TCCamp.SkillState.ColdTimeLeft)
  return coldtimeleft_;
}
inline void SkillState::set_coldtimeleft(float value) {
  
  coldtimeleft_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SkillState.ColdTimeLeft)
}

// -------------------------------------------------------------------

// SlowState

// float SlowSpeed = 2;
inline void SlowState::clear_slowspeed() {
  slowspeed_ = 0;
}
inline float SlowState::slowspeed() const {
  // @@protoc_insertion_point(field_get:TCCamp.SlowState.SlowSpeed)
  return slowspeed_;
}
inline void SlowState::set_slowspeed(float value) {
  
  slowspeed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SlowState.SlowSpeed)
}

// float LeftTime = 3;
inline void SlowState::clear_lefttime() {
  lefttime_ = 0;
}
inline float SlowState::lefttime() const {
  // @@protoc_insertion_point(field_get:TCCamp.SlowState.LeftTime)
  return lefttime_;
}
inline void SlowState::set_lefttime(float value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SlowState.LeftTime)
}

// -------------------------------------------------------------------

// GhostTimer

// int32 GhostID = 1;
inline void GhostTimer::clear_ghostid() {
  ghostid_ = 0;
}
inline ::google::protobuf::int32 GhostTimer::ghostid() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostTimer.GhostID)
  return ghostid_;
}
inline void GhostTimer::set_ghostid(::google::protobuf::int32 value) {
  
  ghostid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostTimer.GhostID)
}

// float LeftTime = 2;
inline void GhostTimer::clear_lefttime() {
  lefttime_ = 0;
}
inline float GhostTimer::lefttime() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostTimer.LeftTime)
  return lefttime_;
}
inline void GhostTimer::set_lefttime(float value) {
  
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostTimer.LeftTime)
}

// int32 type = 3;
inline void GhostTimer::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 GhostTimer::type() const {
  // @@protoc_insertion_point(field_get:TCCamp.GhostTimer.type)
  return type_;
}
inline void GhostTimer::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GhostTimer.type)
}

// -------------------------------------------------------------------

// LevelState

// int32 KillGhost = 1;
inline void LevelState::clear_killghost() {
  killghost_ = 0;
}
inline ::google::protobuf::int32 LevelState::killghost() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.KillGhost)
  return killghost_;
}
inline void LevelState::set_killghost(::google::protobuf::int32 value) {
  
  killghost_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelState.KillGhost)
}

// float TimeDuration = 2;
inline void LevelState::clear_timeduration() {
  timeduration_ = 0;
}
inline float LevelState::timeduration() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.TimeDuration)
  return timeduration_;
}
inline void LevelState::set_timeduration(float value) {
  
  timeduration_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelState.TimeDuration)
}

// .TCCamp.PosRot PlayerTransform = 3;
inline bool LevelState::has_playertransform() const {
  return this != internal_default_instance() && playertransform_ != NULL;
}
inline void LevelState::clear_playertransform() {
  if (GetArenaNoVirtual() == NULL && playertransform_ != NULL) {
    delete playertransform_;
  }
  playertransform_ = NULL;
}
inline const ::TCCamp::PosRot& LevelState::_internal_playertransform() const {
  return *playertransform_;
}
inline const ::TCCamp::PosRot& LevelState::playertransform() const {
  const ::TCCamp::PosRot* p = playertransform_;
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.PlayerTransform)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PosRot*>(
      &::TCCamp::_PosRot_default_instance_);
}
inline ::TCCamp::PosRot* LevelState::release_playertransform() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelState.PlayerTransform)
  
  ::TCCamp::PosRot* temp = playertransform_;
  playertransform_ = NULL;
  return temp;
}
inline ::TCCamp::PosRot* LevelState::mutable_playertransform() {
  
  if (playertransform_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PosRot>(GetArenaNoVirtual());
    playertransform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.PlayerTransform)
  return playertransform_;
}
inline void LevelState::set_allocated_playertransform(::TCCamp::PosRot* playertransform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playertransform_;
  }
  if (playertransform) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playertransform = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playertransform, submessage_arena);
    }
    
  } else {
    
  }
  playertransform_ = playertransform;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelState.PlayerTransform)
}

// int32 PlayerHP = 4;
inline void LevelState::clear_playerhp() {
  playerhp_ = 0;
}
inline ::google::protobuf::int32 LevelState::playerhp() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.PlayerHP)
  return playerhp_;
}
inline void LevelState::set_playerhp(::google::protobuf::int32 value) {
  
  playerhp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelState.PlayerHP)
}

// repeated .TCCamp.GhostState GhostStateList = 5;
inline int LevelState::ghoststatelist_size() const {
  return ghoststatelist_.size();
}
inline void LevelState::clear_ghoststatelist() {
  ghoststatelist_.Clear();
}
inline ::TCCamp::GhostState* LevelState::mutable_ghoststatelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.GhostStateList)
  return ghoststatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostState >*
LevelState::mutable_ghoststatelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.GhostStateList)
  return &ghoststatelist_;
}
inline const ::TCCamp::GhostState& LevelState::ghoststatelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.GhostStateList)
  return ghoststatelist_.Get(index);
}
inline ::TCCamp::GhostState* LevelState::add_ghoststatelist() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.GhostStateList)
  return ghoststatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostState >&
LevelState::ghoststatelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.GhostStateList)
  return ghoststatelist_;
}

// repeated .TCCamp.TreasureChestState TreasureChestStateList = 6;
inline int LevelState::treasurecheststatelist_size() const {
  return treasurecheststatelist_.size();
}
inline void LevelState::clear_treasurecheststatelist() {
  treasurecheststatelist_.Clear();
}
inline ::TCCamp::TreasureChestState* LevelState::mutable_treasurecheststatelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.TreasureChestStateList)
  return treasurecheststatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestState >*
LevelState::mutable_treasurecheststatelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.TreasureChestStateList)
  return &treasurecheststatelist_;
}
inline const ::TCCamp::TreasureChestState& LevelState::treasurecheststatelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.TreasureChestStateList)
  return treasurecheststatelist_.Get(index);
}
inline ::TCCamp::TreasureChestState* LevelState::add_treasurecheststatelist() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.TreasureChestStateList)
  return treasurecheststatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::TreasureChestState >&
LevelState::treasurecheststatelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.TreasureChestStateList)
  return treasurecheststatelist_;
}

// repeated .TCCamp.SkillState SkillStateList = 7;
inline int LevelState::skillstatelist_size() const {
  return skillstatelist_.size();
}
inline void LevelState::clear_skillstatelist() {
  skillstatelist_.Clear();
}
inline ::TCCamp::SkillState* LevelState::mutable_skillstatelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.SkillStateList)
  return skillstatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::SkillState >*
LevelState::mutable_skillstatelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.SkillStateList)
  return &skillstatelist_;
}
inline const ::TCCamp::SkillState& LevelState::skillstatelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.SkillStateList)
  return skillstatelist_.Get(index);
}
inline ::TCCamp::SkillState* LevelState::add_skillstatelist() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.SkillStateList)
  return skillstatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::SkillState >&
LevelState::skillstatelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.SkillStateList)
  return skillstatelist_;
}

// repeated .TCCamp.LightState LightStateList = 8;
inline int LevelState::lightstatelist_size() const {
  return lightstatelist_.size();
}
inline void LevelState::clear_lightstatelist() {
  lightstatelist_.Clear();
}
inline ::TCCamp::LightState* LevelState::mutable_lightstatelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.LightStateList)
  return lightstatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::LightState >*
LevelState::mutable_lightstatelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.LightStateList)
  return &lightstatelist_;
}
inline const ::TCCamp::LightState& LevelState::lightstatelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.LightStateList)
  return lightstatelist_.Get(index);
}
inline ::TCCamp::LightState* LevelState::add_lightstatelist() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.LightStateList)
  return lightstatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::LightState >&
LevelState::lightstatelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.LightStateList)
  return lightstatelist_;
}

// repeated .TCCamp.IntPair GhostSendbackAdmin = 9;
inline int LevelState::ghostsendbackadmin_size() const {
  return ghostsendbackadmin_.size();
}
inline void LevelState::clear_ghostsendbackadmin() {
  ghostsendbackadmin_.Clear();
}
inline ::TCCamp::IntPair* LevelState::mutable_ghostsendbackadmin(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.GhostSendbackAdmin)
  return ghostsendbackadmin_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >*
LevelState::mutable_ghostsendbackadmin() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.GhostSendbackAdmin)
  return &ghostsendbackadmin_;
}
inline const ::TCCamp::IntPair& LevelState::ghostsendbackadmin(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.GhostSendbackAdmin)
  return ghostsendbackadmin_.Get(index);
}
inline ::TCCamp::IntPair* LevelState::add_ghostsendbackadmin() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.GhostSendbackAdmin)
  return ghostsendbackadmin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >&
LevelState::ghostsendbackadmin() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.GhostSendbackAdmin)
  return ghostsendbackadmin_;
}

// repeated .TCCamp.IntPair DeactiveTimerID2GhostID = 10;
inline int LevelState::deactivetimerid2ghostid_size() const {
  return deactivetimerid2ghostid_.size();
}
inline void LevelState::clear_deactivetimerid2ghostid() {
  deactivetimerid2ghostid_.Clear();
}
inline ::TCCamp::IntPair* LevelState::mutable_deactivetimerid2ghostid(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.DeactiveTimerID2GhostID)
  return deactivetimerid2ghostid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >*
LevelState::mutable_deactivetimerid2ghostid() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.DeactiveTimerID2GhostID)
  return &deactivetimerid2ghostid_;
}
inline const ::TCCamp::IntPair& LevelState::deactivetimerid2ghostid(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.DeactiveTimerID2GhostID)
  return deactivetimerid2ghostid_.Get(index);
}
inline ::TCCamp::IntPair* LevelState::add_deactivetimerid2ghostid() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.DeactiveTimerID2GhostID)
  return deactivetimerid2ghostid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >&
LevelState::deactivetimerid2ghostid() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.DeactiveTimerID2GhostID)
  return deactivetimerid2ghostid_;
}

// repeated .TCCamp.IntPair SponceTimerID2GhostID = 11;
inline int LevelState::sponcetimerid2ghostid_size() const {
  return sponcetimerid2ghostid_.size();
}
inline void LevelState::clear_sponcetimerid2ghostid() {
  sponcetimerid2ghostid_.Clear();
}
inline ::TCCamp::IntPair* LevelState::mutable_sponcetimerid2ghostid(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.SponceTimerID2GhostID)
  return sponcetimerid2ghostid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >*
LevelState::mutable_sponcetimerid2ghostid() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.SponceTimerID2GhostID)
  return &sponcetimerid2ghostid_;
}
inline const ::TCCamp::IntPair& LevelState::sponcetimerid2ghostid(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.SponceTimerID2GhostID)
  return sponcetimerid2ghostid_.Get(index);
}
inline ::TCCamp::IntPair* LevelState::add_sponcetimerid2ghostid() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.SponceTimerID2GhostID)
  return sponcetimerid2ghostid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::IntPair >&
LevelState::sponcetimerid2ghostid() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.SponceTimerID2GhostID)
  return sponcetimerid2ghostid_;
}

// repeated .TCCamp.TimerID2floatTimes TimerID2Times = 12;
inline int LevelState::timerid2times_size() const {
  return timerid2times_.size();
}
inline void LevelState::clear_timerid2times() {
  timerid2times_.Clear();
}
inline ::TCCamp::TimerID2floatTimes* LevelState::mutable_timerid2times(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.TimerID2Times)
  return timerid2times_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::TimerID2floatTimes >*
LevelState::mutable_timerid2times() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.TimerID2Times)
  return &timerid2times_;
}
inline const ::TCCamp::TimerID2floatTimes& LevelState::timerid2times(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.TimerID2Times)
  return timerid2times_.Get(index);
}
inline ::TCCamp::TimerID2floatTimes* LevelState::add_timerid2times() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.TimerID2Times)
  return timerid2times_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::TimerID2floatTimes >&
LevelState::timerid2times() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.TimerID2Times)
  return timerid2times_;
}

// .TCCamp.SlowState PlayerSlowState = 13;
inline bool LevelState::has_playerslowstate() const {
  return this != internal_default_instance() && playerslowstate_ != NULL;
}
inline void LevelState::clear_playerslowstate() {
  if (GetArenaNoVirtual() == NULL && playerslowstate_ != NULL) {
    delete playerslowstate_;
  }
  playerslowstate_ = NULL;
}
inline const ::TCCamp::SlowState& LevelState::_internal_playerslowstate() const {
  return *playerslowstate_;
}
inline const ::TCCamp::SlowState& LevelState::playerslowstate() const {
  const ::TCCamp::SlowState* p = playerslowstate_;
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.PlayerSlowState)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::SlowState*>(
      &::TCCamp::_SlowState_default_instance_);
}
inline ::TCCamp::SlowState* LevelState::release_playerslowstate() {
  // @@protoc_insertion_point(field_release:TCCamp.LevelState.PlayerSlowState)
  
  ::TCCamp::SlowState* temp = playerslowstate_;
  playerslowstate_ = NULL;
  return temp;
}
inline ::TCCamp::SlowState* LevelState::mutable_playerslowstate() {
  
  if (playerslowstate_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::SlowState>(GetArenaNoVirtual());
    playerslowstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.PlayerSlowState)
  return playerslowstate_;
}
inline void LevelState::set_allocated_playerslowstate(::TCCamp::SlowState* playerslowstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerslowstate_;
  }
  if (playerslowstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerslowstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerslowstate, submessage_arena);
    }
    
  } else {
    
  }
  playerslowstate_ = playerslowstate;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.LevelState.PlayerSlowState)
}

// int32 LevelID = 14;
inline void LevelState::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 LevelState::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.LevelID)
  return levelid_;
}
inline void LevelState::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.LevelState.LevelID)
}

// repeated .TCCamp.GhostTimer GhostTimerList = 15;
inline int LevelState::ghosttimerlist_size() const {
  return ghosttimerlist_.size();
}
inline void LevelState::clear_ghosttimerlist() {
  ghosttimerlist_.Clear();
}
inline ::TCCamp::GhostTimer* LevelState::mutable_ghosttimerlist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.LevelState.GhostTimerList)
  return ghosttimerlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostTimer >*
LevelState::mutable_ghosttimerlist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.LevelState.GhostTimerList)
  return &ghosttimerlist_;
}
inline const ::TCCamp::GhostTimer& LevelState::ghosttimerlist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.LevelState.GhostTimerList)
  return ghosttimerlist_.Get(index);
}
inline ::TCCamp::GhostTimer* LevelState::add_ghosttimerlist() {
  // @@protoc_insertion_point(field_add:TCCamp.LevelState.GhostTimerList)
  return ghosttimerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::GhostTimer >&
LevelState::ghosttimerlist() const {
  // @@protoc_insertion_point(field_list:TCCamp.LevelState.GhostTimerList)
  return ghosttimerlist_;
}

// -------------------------------------------------------------------

// ReconnectPkg

// .TCCamp.LevelDataRsp LevelData = 1;
inline bool ReconnectPkg::has_leveldata() const {
  return this != internal_default_instance() && leveldata_ != NULL;
}
inline void ReconnectPkg::clear_leveldata() {
  if (GetArenaNoVirtual() == NULL && leveldata_ != NULL) {
    delete leveldata_;
  }
  leveldata_ = NULL;
}
inline const ::TCCamp::LevelDataRsp& ReconnectPkg::_internal_leveldata() const {
  return *leveldata_;
}
inline const ::TCCamp::LevelDataRsp& ReconnectPkg::leveldata() const {
  const ::TCCamp::LevelDataRsp* p = leveldata_;
  // @@protoc_insertion_point(field_get:TCCamp.ReconnectPkg.LevelData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::LevelDataRsp*>(
      &::TCCamp::_LevelDataRsp_default_instance_);
}
inline ::TCCamp::LevelDataRsp* ReconnectPkg::release_leveldata() {
  // @@protoc_insertion_point(field_release:TCCamp.ReconnectPkg.LevelData)
  
  ::TCCamp::LevelDataRsp* temp = leveldata_;
  leveldata_ = NULL;
  return temp;
}
inline ::TCCamp::LevelDataRsp* ReconnectPkg::mutable_leveldata() {
  
  if (leveldata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::LevelDataRsp>(GetArenaNoVirtual());
    leveldata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.ReconnectPkg.LevelData)
  return leveldata_;
}
inline void ReconnectPkg::set_allocated_leveldata(::TCCamp::LevelDataRsp* leveldata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leveldata_;
  }
  if (leveldata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leveldata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leveldata, submessage_arena);
    }
    
  } else {
    
  }
  leveldata_ = leveldata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ReconnectPkg.LevelData)
}

// .TCCamp.LevelState State = 2;
inline bool ReconnectPkg::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void ReconnectPkg::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::TCCamp::LevelState& ReconnectPkg::_internal_state() const {
  return *state_;
}
inline const ::TCCamp::LevelState& ReconnectPkg::state() const {
  const ::TCCamp::LevelState* p = state_;
  // @@protoc_insertion_point(field_get:TCCamp.ReconnectPkg.State)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::LevelState*>(
      &::TCCamp::_LevelState_default_instance_);
}
inline ::TCCamp::LevelState* ReconnectPkg::release_state() {
  // @@protoc_insertion_point(field_release:TCCamp.ReconnectPkg.State)
  
  ::TCCamp::LevelState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::TCCamp::LevelState* ReconnectPkg::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::LevelState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.ReconnectPkg.State)
  return state_;
}
inline void ReconnectPkg::set_allocated_state(::TCCamp::LevelState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ReconnectPkg.State)
}

// -------------------------------------------------------------------

// ServerSaveFile

// int32 LevelID = 1;
inline void ServerSaveFile::clear_levelid() {
  levelid_ = 0;
}
inline ::google::protobuf::int32 ServerSaveFile::levelid() const {
  // @@protoc_insertion_point(field_get:TCCamp.ServerSaveFile.LevelID)
  return levelid_;
}
inline void ServerSaveFile::set_levelid(::google::protobuf::int32 value) {
  
  levelid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ServerSaveFile.LevelID)
}

// .TCCamp.LevelState save = 2;
inline bool ServerSaveFile::has_save() const {
  return this != internal_default_instance() && save_ != NULL;
}
inline void ServerSaveFile::clear_save() {
  if (GetArenaNoVirtual() == NULL && save_ != NULL) {
    delete save_;
  }
  save_ = NULL;
}
inline const ::TCCamp::LevelState& ServerSaveFile::_internal_save() const {
  return *save_;
}
inline const ::TCCamp::LevelState& ServerSaveFile::save() const {
  const ::TCCamp::LevelState* p = save_;
  // @@protoc_insertion_point(field_get:TCCamp.ServerSaveFile.save)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::LevelState*>(
      &::TCCamp::_LevelState_default_instance_);
}
inline ::TCCamp::LevelState* ServerSaveFile::release_save() {
  // @@protoc_insertion_point(field_release:TCCamp.ServerSaveFile.save)
  
  ::TCCamp::LevelState* temp = save_;
  save_ = NULL;
  return temp;
}
inline ::TCCamp::LevelState* ServerSaveFile::mutable_save() {
  
  if (save_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::LevelState>(GetArenaNoVirtual());
    save_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.ServerSaveFile.save)
  return save_;
}
inline void ServerSaveFile::set_allocated_save(::TCCamp::LevelState* save) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete save_;
  }
  if (save) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save, submessage_arena);
    }
    
  } else {
    
  }
  save_ = save;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ServerSaveFile.save)
}

// int32 SpendTime = 3;
inline void ServerSaveFile::clear_spendtime() {
  spendtime_ = 0;
}
inline ::google::protobuf::int32 ServerSaveFile::spendtime() const {
  // @@protoc_insertion_point(field_get:TCCamp.ServerSaveFile.SpendTime)
  return spendtime_;
}
inline void ServerSaveFile::set_spendtime(::google::protobuf::int32 value) {
  
  spendtime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ServerSaveFile.SpendTime)
}

// int64 SaveTime = 4;
inline void ServerSaveFile::clear_savetime() {
  savetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ServerSaveFile::savetime() const {
  // @@protoc_insertion_point(field_get:TCCamp.ServerSaveFile.SaveTime)
  return savetime_;
}
inline void ServerSaveFile::set_savetime(::google::protobuf::int64 value) {
  
  savetime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ServerSaveFile.SaveTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCCamp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCCamp::CLIENT_LEVEL_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::CLIENT_LEVEL_CMD>() {
  return ::TCCamp::CLIENT_LEVEL_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::SERVER_LEVEL_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::SERVER_LEVEL_CMD>() {
  return ::TCCamp::SERVER_LEVEL_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::LEVEL_LIST_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::LEVEL_LIST_RESULT_CODE>() {
  return ::TCCamp::LEVEL_LIST_RESULT_CODE_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::LEVEL_DETAIL_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::LEVEL_DETAIL_RESULT_CODE>() {
  return ::TCCamp::LEVEL_DETAIL_RESULT_CODE_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::LEVEL_DATA_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::LEVEL_DATA_RESULT_CODE>() {
  return ::TCCamp::LEVEL_DATA_RESULT_CODE_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::LEVEL_SETTLE_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::LEVEL_SETTLE_RESULT_CODE>() {
  return ::TCCamp::LEVEL_SETTLE_RESULT_CODE_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::LEVEL_RANK_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::LEVEL_RANK_RESULT_CODE>() {
  return ::TCCamp::LEVEL_RANK_RESULT_CODE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_level_2eproto
